generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attributes {
  attributeid                        BigInt             @id @default(autoincrement())
  attributename                      String?            @db.VarChar(250)
  description                        String?
  attributeicon                      String?
  attributecolor                     String?            @db.VarChar(50)
  uoid                               BigInt?
  createdby                          BigInt?
  createddate                        DateTime?          @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?          @db.Timestamp(6)
  isdeleted                          Boolean?           @default(false)
  deletedby                          BigInt?
  deleteddate                        DateTime?          @db.Timestamp(6)
  isspecification                    Boolean?
  users_attributes_createdbyTousers  users?             @relation("attributes_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_uid")
  users_attributes_deletedbyTousers  users?             @relation("attributes_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_uid")
  users_attributes_modifiedbyTousers users?             @relation("attributes_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_uid")
  userorganization                   userorganization?  @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "orgid_uo_a")
  attributevalues                    attributevalues[]
  mridetails                         mridetails[]
  orderitemdetails                   orderitemdetails[]
  pvamapping                         pvamapping[]
  userattrmapping                    userattrmapping[]

  @@index([createdby], map: "createdby_u_uid_idx")
  @@index([deletedby], map: "deletedby_u_uid_idx")
  @@index([modifiedby], map: "modifyby_u_uid_idx")
  @@index([uoid], map: "orgid_uo_a_idx")
}

model attributevalues {
  avid                                    BigInt             @id @default(autoincrement())
  attributeid                             BigInt?
  avname                                  String?            @db.VarChar(250)
  avdisplayorder                          String?            @db.VarChar(250)
  uoid                                    BigInt?
  avicon                                  String?
  avcolor                                 String?            @db.VarChar(50)
  createdby                               BigInt?
  createddate                             DateTime?          @default(now()) @db.Timestamp(6)
  modifiedby                              BigInt?
  modifieddate                            DateTime?          @db.Timestamp(6)
  isdeleted                               Boolean?           @default(false)
  deletedby                               BigInt?
  deleteddate                             DateTime?          @db.Timestamp(6)
  attributes                              attributes?        @relation(fields: [attributeid], references: [attributeid], onDelete: Cascade, map: "attrid_a_av")
  users_attributevalues_createdbyTousers  users?             @relation("attributevalues_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_av")
  users_attributevalues_deletedbyTousers  users?             @relation("attributevalues_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_av")
  users_attributevalues_modifiedbyTousers users?             @relation("attributevalues_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_av")
  userorganization                        userorganization?  @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "orgid_uo_av")
  orderitemdetails                        orderitemdetails[]
  pvamvalues                              pvamvalues[]
  userattrmapping                         userattrmapping[]

  @@index([attributeid], map: "attrid_a_av_idx")
  @@index([uoid], map: "orgid_uo_av_idx")
}

model bom {
  bomid                       BigInt            @id @default(autoincrement())
  bomno                       Int?
  bomname                     String?           @db.VarChar(100)
  bomdate                     DateTime?         @db.Timestamp(6)
  enddate                     DateTime?         @db.Timestamp(6)
  exptime                     Int?
  sctype                      BigInt?
  seriesid                    BigInt?
  remarks                     String?
  uoid                        BigInt?
  isdeleted                   Boolean?          @default(false)
  createdby                   BigInt?
  createddate                 DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                  BigInt?
  modifieddate                DateTime?         @db.Timestamp(6)
  deletedby                   BigInt?
  deleteddate                 DateTime?         @db.Timestamp(6)
  isapproved                  Boolean?          @default(false)
  approvedby                  BigInt?
  users_bom_approvedbyTousers users?            @relation("bom_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "apb_u_bom")
  users_bom_createdbyTousers  users?            @relation("bom_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_bom")
  users_bom_deletedbyTousers  users?            @relation("bom_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_bom")
  users_bom_modifiedbyTousers users?            @relation("bom_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_bom")
  mastervalues                mastervalues?     @relation(fields: [sctype], references: [mvid], onDelete: Cascade, map: "sctype_mv_bom")
  series                      series?           @relation(fields: [seriesid], references: [sid], onDelete: Cascade, map: "sid_s_bom")
  userorganization            userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_bom")
  bomattachment               bomattachment[]
  bomdetails                  bomdetails[]
  bomschedule                 bomschedule[]
  stockconversion             stockconversion[]

  @@index([approvedby], map: "apb_u_bom_idx")
  @@index([createdby], map: "cb_u_bom_idx")
  @@index([deletedby], map: "db_u_bom_idx")
  @@index([modifiedby], map: "mb_u_bom_idx")
  @@index([sctype], map: "sctype_mv_bom_idx")
  @@index([seriesid], map: "sid_s_bom_idx")
  @@index([uoid], map: "uoid_uo_bom_idx")
}

model bomattachment {
  baid       BigInt      @id @default(autoincrement())
  bomid      BigInt?
  umid       BigInt?
  bom        bom?        @relation(fields: [bomid], references: [bomid], onDelete: Cascade, map: "bomid_b_ba")
  userimages userimages? @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_um_ba")

  @@index([bomid], map: "bomid_b_ba_idx")
  @@index([umid], map: "umid_um_ba_idx")
}

model bomdetails {
  bomdid                             BigInt                   @id @default(autoincrement())
  bomid                              BigInt?
  proid                              BigInt?
  pvid                               BigInt?
  bomqty                             Decimal?                 @db.Decimal(19, 4)
  uomid                              BigInt?
  scdtype                            Boolean?
  notes                              String?
  isdeleted                          Boolean?                 @default(false)
  createdby                          BigInt?
  createddate                        DateTime?                @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?                @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?                @db.Timestamp(6)
  isapproved                         Boolean?                 @default(false)
  approvedby                         BigInt?
  users_bomdetails_approvedbyTousers users?                   @relation("bomdetails_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "apb_u_bmd")
  bom                                bom?                     @relation(fields: [bomid], references: [bomid], onDelete: Cascade, map: "bmid_bm_bmd")
  users_bomdetails_createdbyTousers  users?                   @relation("bomdetails_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_bmd")
  users_bomdetails_deletedbyTousers  users?                   @relation("bomdetails_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_bmd")
  users_bomdetails_modifiedbyTousers users?                   @relation("bomdetails_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_bmd")
  product                            product?                 @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_pro_bmd")
  provariants                        provariants?             @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_bmd")
  unitofmeasure                      unitofmeasure?           @relation(fields: [uomid], references: [uomid], onDelete: Cascade, map: "uomid_uom_bmd")
  stockconversiondetails             stockconversiondetails[]

  @@index([approvedby], map: "apb_u_bmd_idx")
  @@index([bomid], map: "bmid_bm_bmd_idx")
  @@index([createdby], map: "cb_u_bmd_idx")
  @@index([deletedby], map: "db_u_bmd_idx")
  @@index([modifiedby], map: "mb_u_bmd_idx")
  @@index([proid], map: "proid_pro_bmd_idx")
  @@index([pvid], map: "pvid_pv_bmd_idx")
  @@index([uomid], map: "uomid_uom_bmd_idx")
}

model bomschedule {
  bsid                                BigInt            @id @default(autoincrement())
  date                                DateTime?         @db.Timestamp(6)
  bomid                               BigInt?
  bomscheduleno                       Int?
  uaid                                BigInt?
  uoid                                BigInt?
  qty                                 Decimal?          @db.Decimal(19, 4)
  isdeleted                           Boolean?          @default(false)
  createdby                           BigInt?
  createddate                         DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                          BigInt?
  modifieddate                        DateTime?         @db.Timestamp(6)
  deletedby                           BigInt?
  deleteddate                         DateTime?         @db.Timestamp(6)
  isapproved                          Boolean?          @default(false)
  approvedby                          BigInt?
  users_bomschedule_approvedbyTousers users?            @relation("bomschedule_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_bs")
  bom                                 bom?              @relation(fields: [bomid], references: [bomid], onDelete: Cascade, map: "bomid_bom_bs")
  users_bomschedule_createdbyTousers  users?            @relation("bomschedule_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_bs")
  users_bomschedule_deletedbyTousers  users?            @relation("bomschedule_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_bs")
  users_bomschedule_modifiedbyTousers users?            @relation("bomschedule_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifiedby_u_bs")
  useraddress                         useraddress?      @relation(fields: [uaid], references: [uaid], onDelete: Cascade, map: "uaid_ua_bs")
  userorganization                    userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_bs")

  @@index([approvedby], map: "approvedby_u_bs_idx")
  @@index([bomid], map: "bomid_bom_bs_idx")
  @@index([createdby], map: "createdby_u_bs_idx")
  @@index([deletedby], map: "deletedby_u_bs_idx")
  @@index([modifiedby], map: "modifiedby_u_bs_idx")
  @@index([uaid], map: "uaid_ua_bs_idx")
  @@index([uoid], map: "uoid_uo_bs_idx")
}

model categories {
  catid                              BigInt                   @id @default(autoincrement())
  catname                            String                   @db.VarChar(250)
  categorytype                       Int?
  catdesc                            String?                  @db.VarChar(250)
  catfullpath                        String?
  parentcatid                        Int?
  orderno                            Int?
  isdeleted                          Boolean?                 @default(false)
  createdby                          BigInt?
  createddate                        DateTime?                @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?                @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?                @db.Timestamp(6)
  ispublished                        Boolean?
  displayorder                       BigInt?
  catimageid                         BigInt?
  isfeatured                         Boolean?                 @default(false)
  userimages                         userimages?              @relation(fields: [catimageid], references: [umid], map: "catimageid_fkey")
  users_categories_createdbyTousers  users?                   @relation("categories_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_c")
  users_categories_deletedbyTousers  users?                   @relation("categories_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_c")
  users_categories_modifiedbyTousers users?                   @relation("categories_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_c")
  ledgers                            ledgers[]
  product                            product[]
  productcategorymapping             productcategorymapping[]
  unitofmeasure                      unitofmeasure[]
  uomconversions                     uomconversions[]

  @@index([createdby], map: "createdby_u_c_idx")
  @@index([deletedby], map: "deletedby_u_c_idx")
  @@index([modifiedby], map: "modifyby_u_c_idx")
}

model countries {
  countryid       BigInt        @id @default(autoincrement())
  name            String        @db.VarChar(100)
  iso3            String?       @db.Char(3)
  numeric_code    String?       @db.Char(3)
  iso2            String?       @db.Char(2)
  phonecode       String?       @db.VarChar(255)
  capital         String?       @db.VarChar(255)
  currency        String?       @db.VarChar(255)
  currency_name   String?       @db.VarChar(255)
  currency_symbol String?       @db.VarChar(255)
  tld             String?       @db.VarChar(255)
  native          String?       @db.VarChar(255)
  region          String?       @db.VarChar(255)
  subregion       String?       @db.VarChar(255)
  timezones       String?
  translations    String?
  latitude        Decimal?      @db.Decimal(10, 8)
  longitude       Decimal?      @db.Decimal(11, 8)
  emoji           String?       @db.VarChar(191)
  emojiU          String?       @db.VarChar(191)
  created_at      DateTime?     @db.Timestamp(6)
  updated_at      DateTime?     @db.Timestamp(6)
  flag            Int           @default(1) @db.SmallInt
  wikiDataId      String?       @db.VarChar(255)
  product         product[]
  states          states[]
  useraddress     useraddress[]
}

model currencies {
  currid                                               BigInt             @id @default(autoincrement())
  currname                                             String?            @db.VarChar(50)
  currisactive                                         Boolean            @default(false)
  currfractionname                                     String?            @db.VarChar(50)
  currfractionunits                                    Int?
  currsmallestfu                                       Decimal?           @db.Decimal(4, 3)
  currsymbol                                           String?            @db.VarChar(1)
  currnumformat                                        BigInt?
  mastervalues                                         mastervalues?      @relation(fields: [currnumformat], references: [mvid], onDelete: Cascade, map: "currnumformat_mv_cu")
  currencyexchange_currencyexchange_cefromTocurrencies currencyexchange[] @relation("currencyexchange_cefromTocurrencies")
  currencyexchange_currencyexchange_cetoTocurrencies   currencyexchange[] @relation("currencyexchange_cetoTocurrencies")
  provariants                                          provariants[]
  users                                                users[]

  @@index([currnumformat], map: "currnumformat_mv_cu_idx")
}

model currencyexchange {
  ceid                                           BigInt      @id @default(autoincrement())
  cedate                                         DateTime?   @db.Timestamp(6)
  cefrom                                         BigInt?
  ceto                                           BigInt?
  cerate                                         Decimal?    @db.Decimal(19, 4)
  uid                                            BigInt?
  ceforbuying                                    Boolean     @default(false)
  ceforselling                                   Boolean     @default(false)
  isdeleted                                      Boolean     @default(false)
  createdby                                      BigInt?
  createddate                                    DateTime?   @default(now()) @db.Timestamp(6)
  modifiedby                                     BigInt?
  modifieddate                                   DateTime?   @db.Timestamp(6)
  deletedby                                      BigInt?
  deleteddate                                    DateTime?   @db.Timestamp(6)
  currencies_currencyexchange_cefromTocurrencies currencies? @relation("currencyexchange_cefromTocurrencies", fields: [cefrom], references: [currid], onDelete: Cascade, map: "cefrom_cu_cex")
  currencies_currencyexchange_cetoTocurrencies   currencies? @relation("currencyexchange_cetoTocurrencies", fields: [ceto], references: [currid], onDelete: Cascade, map: "ceto_cu_cex")
  users_currencyexchange_createdbyTousers        users?      @relation("currencyexchange_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_cex")
  users_currencyexchange_deletedbyTousers        users?      @relation("currencyexchange_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_cex")
  users_currencyexchange_modifiedbyTousers       users?      @relation("currencyexchange_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_cex")
  users_currencyexchange_uidTousers              users?      @relation("currencyexchange_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_cex")

  @@index([cefrom], map: "cefrom_cu_cex_idx")
  @@index([ceto], map: "ceto_idx")
  @@index([createdby], map: "createdby_u_cex_idx")
  @@index([deletedby], map: "deletedby_u_cex_idx")
  @@index([modifiedby], map: "modifyby_u_cex_idx")
  @@index([uid], map: "uid_u_cex_idx")
}

model deliveryreturns {
  return_id         BigInt          @id @default(autoincrement())
  odtitemsmappingid BigInt
  returnquantity    Decimal         @db.Decimal(18, 2)
  returnreason      String          @db.VarChar(255)
  returnstatus      BigInt
  createdby         BigInt
  createddate       DateTime        @default(now()) @db.Timestamp(6)
  approvedby        BigInt?
  approveddate      DateTime?       @db.Timestamp(6)
  odtitemsmapping   odtitemsmapping @relation(fields: [odtitemsmappingid], references: [odtimid], onDelete: Cascade, map: "orderreturns_ibfk_2")
  mastervalues      mastervalues    @relation(fields: [returnstatus], references: [mvid], onDelete: Cascade, map: "orderreturns_masterval_returnstatusfk2")

  @@index([odtitemsmappingid], map: "orderreturns_ibfk_1")
  @@index([returnstatus], map: "orderreturns_masterval_returnstatusfk_idx1")
}

model doctype {
  id          BigInt  @id @default(autoincrement())
  doctypename String? @db.VarChar(55)
}

model documents {
  id            BigInt    @id @default(autoincrement())
  documentname  String    @db.VarChar(100)
  uploaddate    DateTime? @db.Timestamp(6)
  filepath      String    @db.VarChar(255)
  createdby     BigInt?
  Isdeleted     Boolean?
  Modifiedby    BigInt?
  Modifieddate  DateTime? @db.Timestamp(6)
  fileextension String?   @db.VarChar(45)
  docdesc       String?
  users         users?    @relation(fields: [createdby], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "documents_ibfk_1")

  @@index([createdby], map: "createdby")
}

model documentuploadsettings {
  id                BigInt   @id @default(autoincrement())
  allowedformatids  String?  @db.VarChar(200)
  alloweddoctypeids String?  @db.VarChar(200)
  ismultifile       Boolean?
  filecount         BigInt?
  entitytypeid      BigInt?
}

model entitydocumentsmapping {
  id             Int       @id @default(autoincrement())
  entityid       BigInt
  documentid     BigInt
  entitytypeid   BigInt?
  documenttypeid BigInt?
  createdate     DateTime? @db.Timestamp(6)
  Isdeleted      Boolean?
  Createdby      BigInt?

  @@index([entitytypeid], map: "edm_enttype_idx")
  @@index([documentid], map: "entitydocumentsmapping_ibfk_2_idx")
}

model entitytype {
  id          BigInt    @id @default(autoincrement())
  entityname  String?   @db.VarChar(50)
  description String?
  createddate DateTime? @db.Timestamp(6)

  @@index([createddate], map: "filepath_unique")
}

model errorlogs {
  eid                               BigInt    @id @default(autoincrement())
  errormessage                      String?
  action                            String?
  uid                               BigInt?
  logtimestamp                      DateTime  @db.Timestamp(6)
  isdeleted                         Boolean?  @default(false)
  createdby                         BigInt?
  createddate                       DateTime? @db.Timestamp(6)
  modifiedby                        BigInt?
  modifieddate                      DateTime? @db.Timestamp(6)
  deletedby                         BigInt?
  deleteddate                       DateTime? @db.Timestamp(6)
  users_errorlogs_createdbyTousers  users?    @relation("errorlogs_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_elh")
  users_errorlogs_deletedbyTousers  users?    @relation("errorlogs_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_elh")
  users_errorlogs_uidTousers        users?    @relation("errorlogs_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "elh_u_uid")
  users_errorlogs_modifiedbyTousers users?    @relation("errorlogs_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_elh")

  @@index([createdby], map: "createdby_u_uah_idx")
  @@index([deletedby], map: "deletedby_u_uah_idx")
  @@index([modifiedby], map: "modifyby_u_uah_idx")
  @@index([uid], map: "uah_u_uid_idx")
}

model expenseattachment {
  expaid     BigInt      @id @default(autoincrement())
  expid      BigInt?
  umid       BigInt?
  expenses   expenses?   @relation(fields: [expid], references: [expid], onDelete: Cascade, map: "expid_exp_ea")
  userimages userimages? @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_ui_ea")

  @@index([expid], map: "expid_exp_ea_idx")
  @@index([umid], map: "umid_ui_ea_idx")
}

model expensedetails {
  expdid                                 BigInt    @id @default(autoincrement())
  expid                                  BigInt?
  ledger                                 BigInt?
  proid                                  BigInt?
  expddesc                               String?
  expamount                              Decimal?  @db.Decimal(19, 4)
  exptaxrate                             Decimal?  @db.Decimal(5, 2)
  exptaxamount                           Decimal?  @db.Decimal(19, 4)
  exptotalamount                         Decimal?  @db.Decimal(19, 4)
  expeligible                            Boolean?  @default(false)
  isdeleted                              Boolean?  @default(false)
  createdby                              BigInt?
  createddate                            DateTime? @default(now()) @db.Timestamp(6)
  modifiedby                             BigInt?
  modifieddate                           DateTime? @db.Timestamp(6)
  deletedby                              BigInt?
  deleteddate                            DateTime? @db.Timestamp(6)
  isapproved                             Boolean?  @default(false)
  approvedby                             BigInt?
  approveddate                           DateTime? @db.Timestamp(6)
  users_expensedetails_approvedbyTousers users?    @relation("expensedetails_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_expd")
  users_expensedetails_createdbyTousers  users?    @relation("expensedetails_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_expd")
  users_expensedetails_deletedbyTousers  users?    @relation("expensedetails_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_expd")
  expenses                               expenses? @relation(fields: [expid], references: [expid], onDelete: Cascade, map: "expid_exp_expd")
  ledgers                                ledgers?  @relation(fields: [ledger], references: [ledgerid], onDelete: Cascade, map: "ledgerid_l_expd")
  users_expensedetails_modifiedbyTousers users?    @relation("expensedetails_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_expd")
  product                                product?  @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_pro_expd")

  @@index([approvedby], map: "approvedby_u_expd_idx")
  @@index([createdby], map: "createdby_u_expd_idx")
  @@index([deletedby], map: "deletedby_u_expd_idx")
  @@index([expid], map: "expid_exp_expd_idx")
  @@index([ledger], map: "ledgerid_l_expd_idx")
  @@index([modifiedby], map: "modifyby_u_expd_idx")
  @@index([proid], map: "proid_pro_expd_idx")
}

model expenses {
  expid                                              BigInt              @id @default(autoincrement())
  expno                                              Int?
  expdate                                            DateTime?           @db.Timestamp(6)
  seriesid                                           BigInt?
  uoid                                               BigInt?
  expby                                              BigInt?
  expfrom                                            BigInt?
  status                                             BigInt?
  exptype                                            Boolean?            @default(false)
  expremarks                                         String?
  expnotes                                           String?
  expsubtotal                                        Decimal?            @db.Decimal(19, 4)
  exptaxtotal                                        Decimal?            @db.Decimal(19, 4)
  expdiscount                                        Decimal?            @db.Decimal(19, 4)
  exproundoff                                        Decimal?            @db.Decimal(7, 4)
  exptotal                                           Decimal?            @db.Decimal(19, 4)
  expvendor                                          BigInt?
  expvendoraddress                                   BigInt?
  expstate                                           BigInt?
  exppos                                             BigInt?
  expaddrid                                          BigInt?
  isdeleted                                          Boolean?            @default(false)
  createdby                                          BigInt?
  createddate                                        DateTime?           @default(now()) @db.Timestamp(6)
  modifiedby                                         BigInt?
  modifieddate                                       DateTime?           @db.Timestamp(6)
  deletedby                                          BigInt?
  deleteddate                                        DateTime?           @db.Timestamp(6)
  isapproved                                         Boolean?
  approvedby                                         BigInt?
  approveddate                                       DateTime?           @db.Timestamp(6)
  expenseattachment                                  expenseattachment[]
  expensedetails                                     expensedetails[]
  users_expenses_approvedbyTousers                   users?              @relation("expenses_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "exp_u_approvedby")
  users_expenses_createdbyTousers                    users?              @relation("expenses_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "exp_u_createdby")
  users_expenses_deletedbyTousers                    users?              @relation("expenses_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "exp_u_deletedby")
  users_expenses_modifiedbyTousers                   users?              @relation("expenses_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "exp_u_modifyby")
  useraddress_expenses_expaddridTouseraddress        useraddress?        @relation("expenses_expaddridTouseraddress", fields: [expaddrid], references: [uaid], onDelete: Cascade, map: "expaddrid_ua_exp")
  users_expenses_expbyTousers                        users?              @relation("expenses_expbyTousers", fields: [expby], references: [uid], onDelete: Cascade, map: "expby_u_exp")
  ledgers                                            ledgers?            @relation(fields: [expfrom], references: [ledgerid], onDelete: Cascade, map: "expfrom_l_exp")
  states_expenses_expposTostates                     states?             @relation("expenses_expposTostates", fields: [exppos], references: [stateid], onDelete: Cascade, map: "exppos_st_exp")
  states_expenses_expstateTostates                   states?             @relation("expenses_expstateTostates", fields: [expstate], references: [stateid], onDelete: Cascade, map: "expstate_st_exp")
  users_expenses_expvendorTousers                    users?              @relation("expenses_expvendorTousers", fields: [expvendor], references: [uid], onDelete: Cascade, map: "expvd_l_exp")
  useraddress_expenses_expvendoraddressTouseraddress useraddress?        @relation("expenses_expvendoraddressTouseraddress", fields: [expvendoraddress], references: [uaid], onDelete: Cascade, map: "expvdad_ua_exp")
  userorganization                                   userorganization?   @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "orgid_uo_exp")
  series                                             series?             @relation(fields: [seriesid], references: [sid], onDelete: Cascade, map: "sid_s_exp")
  mastervalues                                       mastervalues?       @relation(fields: [status], references: [mvid], onDelete: Cascade, map: "status_mv_exp")

  @@index([approvedby], map: "exp_u_approvedby_idx")
  @@index([createdby], map: "exp_u_createdby_idx")
  @@index([deletedby], map: "exp_u_deletedby_idx")
  @@index([modifiedby], map: "exp_u_modifyby_idx")
  @@index([expaddrid], map: "expaddrid_st_exp_idx")
  @@index([expby], map: "expby_u_exp_idx")
  @@index([expfrom], map: "expfrom_l_exp_idx")
  @@index([exppos], map: "exppos_st_exp_idx")
  @@index([expstate], map: "expstate_st_exp_idx")
  @@index([expvendor], map: "expvd_l_exp_idx")
  @@index([expvendoraddress], map: "expvdad_ua_exp_idx")
  @@index([uoid], map: "orgid_uo_exp_idx")
  @@index([seriesid], map: "sid_s_exp_idx")
  @@index([status], map: "status_mv_exp_idx")
}

model externalwarehouseandorgmapping {
  id             BigInt  @id @default(autoincrement())
  externaluserid BigInt?
  uoid           BigInt?
}

model ezeoxnop {
  id           BigInt    @id @default(autoincrement())
  nopid        BigInt?
  ezeoid       BigInt?
  entitytype   String?   @db.VarChar(45)
  issynced     Boolean?
  source       String?   @db.VarChar(45)
  filepath     String?
  modifieddate DateTime? @db.Timestamp(6)
  modifiedby   BigInt?
  createddate  DateTime? @db.Timestamp(6)
  createdby    BigInt?
  isdeleted    Boolean?
  deletedby    BigInt?
}

model fileextensiontype {
  id                BigInt @id @default(autoincrement())
  fileextensionname String @db.VarChar(45)
}

model floor {
  floor_id          Int                 @id @default(autoincrement())
  uoid              Int
  floor_name        String              @db.VarChar(100)
  floor_number      Int
  area_size         Float?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  is_deleted        Boolean?            @default(false)
  deleted_by        Int?
  table_information table_information[]
}

model formlabels {
  flid                               BigInt            @id @default(autoincrement())
  formid                             BigInt?
  labelname                          String?
  labeltype                          Int?
  labeldesc                          String?
  labelreq                           Int?
  labelval                           String?
  labelauto                          Int?              @db.SmallInt
  labelgroup                         String?
  labelorderno                       Int?
  labeldependent                     Boolean?
  parentlabelid                      BigInt?
  parentlabelvalue                   String?
  isdeleted                          Boolean?          @default(false)
  isAdmin                            Boolean           @default(false)
  createdby                          BigInt?
  createddate                        DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?         @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?         @db.Timestamp(6)
  forms                              forms?            @relation(fields: [formid], references: [formid], onDelete: Cascade, map: "fl_f_formid")
  users_formlabels_createdbyTousers  users?            @relation("formlabels_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "fl_u_createdby")
  users_formlabels_deletedbyTousers  users?            @relation("formlabels_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "fl_u_deletedby")
  users_formlabels_modifiedbyTousers users?            @relation("formlabels_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "fl_u_modifyby")
  formlabelvalues                    formlabelvalues[]

  @@index([formid], map: "fl_f_formid_idx")
  @@index([createdby], map: "fl_u_createdby_idx")
  @@index([deletedby], map: "fl_u_deletedby_idx")
  @@index([modifiedby], map: "fl_u_modifyby_idx")
}

model formlabelvalues {
  flvid                                   BigInt            @id @default(autoincrement())
  formid                                  BigInt?
  labelid                                 BigInt?
  formvalue                               String?
  application_no                          Int?
  uid                                     BigInt?
  uoid                                    BigInt?
  submiteddate                            DateTime          @default(now()) @db.Timestamp(6)
  isdeleted                               Boolean           @default(false)
  createdby                               BigInt?
  createddate                             DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                              BigInt?
  modifieddate                            DateTime?         @db.Timestamp(6)
  deletedby                               BigInt?
  deleteddate                             DateTime?         @db.Timestamp(6)
  forms                                   forms?            @relation(fields: [formid], references: [formid], onDelete: Cascade, map: "flv_f_formid")
  formlabels                              formlabels?       @relation(fields: [labelid], references: [flid], onDelete: Cascade, map: "flv_fl_formlabelid")
  users_formlabelvalues_createdbyTousers  users?            @relation("formlabelvalues_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "flv_u_createdby")
  users_formlabelvalues_deletedbyTousers  users?            @relation("formlabelvalues_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "flv_u_deletedby")
  users_formlabelvalues_modifiedbyTousers users?            @relation("formlabelvalues_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "flv_u_modifyby")
  users_formlabelvalues_uidTousers        users?            @relation("formlabelvalues_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "flv_u_uid")
  userorganization                        userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "flv_uo_uoid")

  @@index([formid], map: "flv_f_formid_idx")
  @@index([labelid], map: "flv_fl_formlabelid_idx")
  @@index([createdby], map: "flv_u_createdby_idx")
  @@index([deletedby], map: "flv_u_deletedby_idx")
  @@index([modifiedby], map: "flv_u_modifyby_idx")
  @@index([uid], map: "flv_u_uid_idx")
  @@index([uoid], map: "flv_uo_uoid_idx")
}

model forms {
  formid                        BigInt            @id @default(autoincrement())
  detailsid                     BigInt?
  formname                      String?           @db.VarChar(100)
  uid                           BigInt?
  uoid                          BigInt?
  isdeleted                     Boolean           @default(false)
  description                   String?
  isadmin                       Boolean           @default(false)
  tags                          String?
  formtype                      Int?
  createdby                     BigInt?
  createddate                   DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                    BigInt?
  modifieddate                  DateTime?         @db.Timestamp(6)
  deletedby                     BigInt?
  deleteddate                   DateTime?         @db.Timestamp(6)
  formlabels                    formlabels[]
  formlabelvalues               formlabelvalues[]
  users_forms_createdbyTousers  users?            @relation("forms_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "f_u_createdby")
  users_forms_deletedbyTousers  users?            @relation("forms_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "f_u_deletedby")
  users_forms_modifiedbyTousers users?            @relation("forms_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "f_u_modifyby")
  users_forms_uidTousers        users?            @relation("forms_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "f_u_uid")
  userorganization              userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "f_uo_uoid")

  @@index([createdby], map: "f_u_createdby_idx")
  @@index([deletedby], map: "f_u_deletedby_idx")
  @@index([modifiedby], map: "f_u_modifyby_idx")
  @@index([uid], map: "f_u_uid_idx")
  @@index([uoid], map: "f_uo_uoid_idx")
}

model gdattachments {
  gdaid                                 BigInt            @id @default(autoincrement())
  gdid                                  BigInt?
  gid                                   BigInt?
  attachment                            String?
  isdeleted                             Boolean?          @default(false)
  createdby                             BigInt?
  createddate                           DateTime?         @db.Timestamp(6)
  modifiedby                            BigInt?
  modifieddate                          DateTime?         @db.Timestamp(6)
  deletedby                             BigInt?
  deleteddate                           DateTime?         @db.Timestamp(6)
  users_gdattachments_createdbyTousers  users?            @relation("gdattachments_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_gda")
  users_gdattachments_deletedbyTousers  users?            @relation("gdattachments_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_gda")
  greviancedetails                      greviancedetails? @relation(fields: [gdid], references: [gdid], onDelete: Cascade, map: "gdid_gd_gda")
  greviance                             greviance?        @relation(fields: [gid], references: [gid], onDelete: Cascade, map: "gid_g_gda")
  users_gdattachments_modifiedbyTousers users?            @relation("gdattachments_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifiedby_u_gda")

  @@index([createdby], map: "createdby_u_gda_idx")
  @@index([deletedby], map: "deletedby_u_gda_idx")
  @@index([gdid], map: "gdid_gd_ga_idx")
  @@index([gid], map: "gid_g_ga_idx")
  @@index([modifiedby], map: "modifiedby_u_gda_idx")
}

model greviance {
  gid                               BigInt             @id @default(autoincrement())
  uid                               BigInt?
  uoid                              BigInt?
  grevincetitle                     String?            @db.VarChar(200)
  grevincedescription               String?
  resolveddate                      DateTime?          @db.Timestamp(6)
  resolvedby                        BigInt?
  ticketno                          String?            @db.VarChar(8)
  year                              Int?
  priority                          Int?
  iscompleted                       Boolean?           @default(false)
  gdate                             DateTime?          @db.Timestamp(6)
  isdeleted                         Boolean?           @default(false)
  createdby                         BigInt?
  createddate                       DateTime?          @default(now()) @db.Timestamp(6)
  modifiedby                        BigInt?
  modifieddate                      DateTime?          @db.Timestamp(6)
  deletedby                         BigInt?
  deleteddate                       DateTime?          @db.Timestamp(6)
  gdattachments                     gdattachments[]
  users_greviance_createdbyTousers  users?             @relation("greviance_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_g")
  users_greviance_deletedbyTousers  users?             @relation("greviance_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_g")
  users_greviance_modifiedbyTousers users?             @relation("greviance_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifiedby_u_g")
  users_greviance_resolvedbyTousers users?             @relation("greviance_resolvedbyTousers", fields: [resolvedby], references: [uid], onDelete: Cascade, map: "resolvedby_u_g")
  users_greviance_uidTousers        users?             @relation("greviance_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_g")
  userorganization                  userorganization?  @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_g")
  greviancedetails                  greviancedetails[]

  @@index([createdby], map: "createdby_u_g_idx")
  @@index([deletedby], map: "deletedby_u_g_idx")
  @@index([modifiedby], map: "modifiedby_u_g_idx")
  @@index([resolvedby], map: "resolvedby_u_g_idx")
  @@index([uid], map: "uid_u_g_idx")
  @@index([uoid], map: "uoid_uo_g_idx")
}

model greviancedetails {
  gdid                                     BigInt          @id @default(autoincrement())
  gid                                      BigInt?
  fromid                                   BigInt?
  gddate                                   DateTime?       @db.Timestamp(6)
  gdreply                                  String?
  isdeleted                                Boolean?        @default(false)
  createdby                                BigInt?
  createddate                              DateTime?       @default(now()) @db.Timestamp(6)
  modifiedby                               BigInt?
  modifieddate                             DateTime?       @db.Timestamp(6)
  deletedby                                BigInt?
  deleteddate                              DateTime?       @db.Timestamp(6)
  gdattachments                            gdattachments[]
  users_greviancedetails_createdbyTousers  users?          @relation("greviancedetails_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_gd")
  users_greviancedetails_deletedbyTousers  users?          @relation("greviancedetails_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby")
  users_greviancedetails_fromidTousers     users?          @relation("greviancedetails_fromidTousers", fields: [fromid], references: [uid], onDelete: Cascade, map: "fromid_u_gd")
  greviance                                greviance?      @relation(fields: [gid], references: [gid], onDelete: Cascade, map: "gid_g_gd")
  users_greviancedetails_modifiedbyTousers users?          @relation("greviancedetails_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifiedby_u_gd")

  @@index([createdby], map: "createdby_u_gd_idx")
  @@index([deletedby], map: "deletedby_idx")
  @@index([fromid], map: "fromid_u_gd_idx")
  @@index([gid], map: "gid_g_gd_idx")
  @@index([modifiedby], map: "modifiedby_u_gd_idx")
}

model identityproof {
  uipid                                 BigInt           @id @default(autoincrement())
  idtypeissuer                          String?          @db.VarChar(100)
  idtypename                            String?          @db.VarChar(100)
  idtyperegex                           String?          @db.VarChar(100)
  idIssuerlogo                          String?          @db.VarChar(100)
  idIssuerwebsite                       String?          @db.VarChar(100)
  isdeleted                             Boolean?         @default(false)
  createdby                             BigInt?
  createddate                           DateTime?        @default(now()) @db.Timestamp(6)
  modifiedby                            BigInt?
  modifieddate                          DateTime?        @db.Timestamp(6)
  deletedby                             BigInt?
  deleteddate                           DateTime?        @db.Timestamp(6)
  idusetype                             Int?
  users_identityproof_createdbyTousers  users?           @relation("identityproof_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "ip_u_createdby")
  users_identityproof_deletedbyTousers  users?           @relation("identityproof_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "ip_u_deletedby")
  users_identityproof_modifiedbyTousers users?           @relation("identityproof_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "ip_u_modifyby")
  userkycdetails                        userkycdetails[]

  @@index([createdby], map: "ip_u_createdby_idx")
  @@index([deletedby], map: "ip_u_deletedby_idx")
  @@index([modifiedby], map: "ip_u_modifyby_idx")
}

model invoiceattachment {
  iaid       BigInt      @id @default(autoincrement())
  invoiceid  BigInt?
  umid       BigInt?
  invoices   invoices?   @relation(fields: [invoiceid], references: [invoiceid], onDelete: Cascade, map: "invoiceid_i_ia")
  userimages userimages? @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_um_ia")

  @@index([invoiceid], map: "invoiceid_i_ia_idx")
  @@index([umid], map: "umid_um_ia_idx")
}

model invoicedeliverymapping {
  idmid                                          BigInt                 @id @default(autoincrement())
  invoiceid                                      BigInt?
  odtid                                          BigInt?
  isdeleted                                      Boolean?               @default(false)
  createdby                                      BigInt?
  createddate                                    DateTime?              @default(now()) @db.Timestamp(6)
  modifiedby                                     BigInt?
  modifieddate                                   DateTime?              @db.Timestamp(6)
  deletedby                                      BigInt?
  deleteddate                                    DateTime?              @db.Timestamp(6)
  isapproved                                     Boolean?               @default(false)
  approvedby                                     BigInt?
  approveddate                                   DateTime?              @db.Timestamp(6)
  users_invoicedeliverymapping_approvedbyTousers users?                 @relation("invoicedeliverymapping_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_idm")
  users_invoicedeliverymapping_createdbyTousers  users?                 @relation("invoicedeliverymapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_idm")
  users_invoicedeliverymapping_deletedbyTousers  users?                 @relation("invoicedeliverymapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_idm")
  invoices                                       invoices?              @relation(fields: [invoiceid], references: [invoiceid], onDelete: Cascade, map: "invid_inv_idm")
  users_invoicedeliverymapping_modifiedbyTousers users?                 @relation("invoicedeliverymapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_idm")
  orderdeliverytracking                          orderdeliverytracking? @relation(fields: [odtid], references: [odtid], onDelete: Cascade, map: "odtid_odt_idm")

  @@index([approvedby], map: "approvedby_u_idm_idx")
  @@index([createdby], map: "createdby_u_idm_idx")
  @@index([deletedby], map: "deletedby_u_idm_idx")
  @@index([invoiceid], map: "invid_inv_idm_idx")
  @@index([modifiedby], map: "modifyby_u_idm_idx")
  @@index([odtid], map: "odtid_odt_idm_idx")
}

model invoices {
  invoiceid                        BigInt                   @id @default(autoincrement())
  invoicedate                      DateTime?                @db.Timestamp(6)
  invoiceseriesid                  BigInt?
  invoiceno                        Int?
  otherpartyrefno                  String?                  @db.VarChar(100)
  orderid                          BigInt?
  uoid                             BigInt?
  isdeleted                        Boolean                  @default(false)
  createdby                        BigInt?
  createddate                      DateTime?                @default(now()) @db.Timestamp(6)
  modifiedby                       BigInt?
  modifieddate                     DateTime?                @db.Timestamp(6)
  deletedby                        BigInt?
  deleteddate                      DateTime?                @db.Timestamp(6)
  isapproved                       Boolean?                 @default(false)
  approvedby                       BigInt?
  approveddate                     DateTime?                @db.Timestamp(6)
  invoiceattachment                invoiceattachment[]
  invoicedeliverymapping           invoicedeliverymapping[]
  users_invoices_approvedbyTousers users?                   @relation("invoices_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_i")
  users_invoices_createdbyTousers  users?                   @relation("invoices_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_i")
  users_invoices_deletedbyTousers  users?                   @relation("invoices_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_i")
  users_invoices_modifiedbyTousers users?                   @relation("invoices_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_i")
  orders                           orders?                  @relation(fields: [orderid], references: [orderid], onDelete: Cascade, map: "orid_or_in")
  userorganization                 userorganization?        @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_in")

  @@index([approvedby], map: "approvedby_u_i_idx")
  @@index([createdby], map: "createdby_u_i_idx")
  @@index([deletedby], map: "deletedby_u_i_idx")
  @@index([modifiedby], map: "modifyby_u_i_idx")
  @@index([orderid], map: "orid_or_in_idx")
  @@index([uoid], map: "uoid_uo_in_idx")
}

model journal {
  journalid                       BigInt              @id @default(autoincrement())
  seriesid                        BigInt?
  journalvchno                    Int?
  ledgerid                        BigInt?
  amount                          Decimal?            @db.Decimal(19, 2)
  creditdebit                     Boolean?
  journalvalue                    Decimal?            @db.Decimal(19, 2)
  journaldate                     DateTime?           @db.Timestamp(6)
  remark                          String?             @db.VarChar(250)
  uoid                            BigInt?
  refid                           BigInt?
  reftable                        String?             @db.VarChar(100)
  isdeleted                       Boolean             @default(false)
  createdby                       BigInt?
  createddate                     DateTime?           @default(now()) @db.Timestamp(6)
  modifiedby                      BigInt?
  modifieddate                    DateTime?           @db.Timestamp(6)
  deletedby                       BigInt?
  deleteddate                     DateTime?           @db.Timestamp(6)
  isapproved                      Boolean             @default(false)
  approvedby                      BigInt?
  approveddate                    DateTime?           @db.Timestamp(6)
  users_journal_approvedbyTousers users?              @relation("journal_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_jo")
  users_journal_createdbyTousers  users?              @relation("journal_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_jo")
  users_journal_deletedbyTousers  users?              @relation("journal_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_jo")
  ledgers                         ledgers?            @relation(fields: [ledgerid], references: [ledgerid], onDelete: Cascade, map: "lid_leg_jo")
  users_journal_modifiedbyTousers users?              @relation("journal_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_jo")
  series                          series?             @relation(fields: [seriesid], references: [sid], onDelete: Cascade, map: "sid_s_j")
  userorganization                userorganization?   @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_jo")
  journalattachment               journalattachment[]

  @@index([approvedby], map: "approvedby_u_jo_idx")
  @@index([createdby], map: "createdby_u_jo_idx")
  @@index([deletedby], map: "deletedby_u_jo_idx")
  @@index([ledgerid], map: "lid_leg_jo_idx")
  @@index([modifiedby], map: "modifyby_u_jo_idx")
  @@index([seriesid], map: "sid_s_j_idx")
  @@index([uoid], map: "uoid_uo_jo_idx")
}

model journalattachment {
  jaid       BigInt      @id @default(autoincrement())
  journalid  BigInt?
  umid       BigInt?
  journal    journal?    @relation(fields: [journalid], references: [journalid], onDelete: Cascade, map: "journalid_j_ja")
  userimages userimages? @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_um_ja")

  @@index([journalid], map: "journalid_j_ja_idx")
  @@index([umid], map: "umid_um_ja_idx")
}

model kycdetails {
  ukid                               BigInt            @id @default(autoincrement())
  uid                                BigInt
  idtype                             BigInt
  idno                               String            @db.VarChar(200)
  idstatus                           String            @db.VarChar(200)
  idupload                           String?
  idverifiedby                       BigInt?
  idverificationdate                 DateTime?         @db.Timestamp(6)
  idverificationremarks              String?           @db.VarChar(500)
  idvalidtill                        DateTime?         @db.Timestamp(6)
  idissuedon                         DateTime?         @db.Timestamp(6)
  isdeleted                          Boolean?          @default(false)
  createdby                          BigInt?
  createddate                        DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?         @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?         @db.Timestamp(6)
  iddealertype                       Int?
  uoid                               BigInt?
  users_kycdetails_createdbyTousers  users?            @relation("kycdetails_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_kd")
  users_kycdetails_deletedbyTousers  users?            @relation("kycdetails_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_kd")
  users_kycdetails_uidTousers        users             @relation("kycdetails_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "kd_u_uid")
  userorganization                   userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "kd_uo_orgid")
  users_kycdetails_modifiedbyTousers users?            @relation("kycdetails_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_kd")

  @@index([createdby], map: "createdby_u_kd_idx")
  @@index([deletedby], map: "deletedby_u_kd_idx")
  @@index([uid], map: "kd_u_uid_idx")
  @@index([uoid], map: "kd_uo_orgid_idx")
  @@index([modifiedby], map: "modifyby_u_kd_idx")
}

model ledgers {
  ledgerid                              BigInt                @id @default(autoincrement())
  catid                                 BigInt?
  ledgername                            String?               @db.VarChar(250)
  ledgerdesc                            String?
  ledgerob                              Decimal?              @db.Decimal(19, 4)
  uoid                                  BigInt?
  bankid                                BigInt?
  bankaccno                             String?               @db.VarChar(50)
  bankswiftcode                         String?               @db.VarChar(50)
  bankmicrcode                          String?               @db.VarChar(50)
  bankifsccode                          String?               @db.VarChar(50)
  bankactype                            String?               @db.VarChar(45)
  bankregmobno                          String?               @db.VarChar(45)
  ledgeraddr                            String?               @db.VarChar(500)
  ledgercode                            String?               @db.VarChar(50)
  isdeleted                             Boolean?              @default(false)
  createdby                             BigInt?
  createddate                           DateTime?             @default(now()) @db.Timestamp(6)
  modifiedby                            BigInt?
  modifieddate                          DateTime?             @db.Timestamp(6)
  deletedby                             BigInt?
  deleteddate                           DateTime?             @db.Timestamp(6)
  expensedetails                        expensedetails[]
  expenses                              expenses[]
  journal                               journal[]
  users_ledgers_createdbyTousers        users?                @relation("ledgers_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_l")
  users_ledgers_deletedbyTousers        users?                @relation("ledgers_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_l")
  categories                            categories?           @relation(fields: [catid], references: [catid], onDelete: Cascade, map: "l_c_catid")
  userorganization                      userorganization?     @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "l_org_orgid")
  users_ledgers_modifiedbyTousers       users?                @relation("ledgers_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_l")
  ledgertaxmapping                      ledgertaxmapping[]
  ledgerusermapping                     ledgerusermapping[]
  orderitems                            orderitems[]
  ordersalescommision                   ordersalescommision[]
  ordertaxdetails                       ordertaxdetails[]
  payment_payment_accidToledgers        payment[]             @relation("payment_accidToledgers")
  payment_payment_otpartyaccidToledgers payment[]             @relation("payment_otpartyaccidToledgers")

  @@index([createdby], map: "createdby_u_l_idx")
  @@index([deletedby], map: "deletedby_u_l_idx")
  @@index([catid], map: "l_c_catid_idx")
  @@index([uoid], map: "l_o_orgid_idx")
  @@index([modifiedby], map: "modifyby_u_l_idx")
}

model ledgertaxmapping {
  ltmid                                    BigInt    @id @default(autoincrement())
  ledgerid                                 BigInt?
  hsncode                                  Int?
  isexempt                                 Boolean?
  effectivedate                            DateTime? @db.Timestamp(6)
  taxrate                                  Decimal?  @db.Decimal(4, 2)
  isdeleted                                Boolean?  @default(false)
  createdby                                BigInt?
  createddate                              DateTime? @default(now()) @db.Timestamp(6)
  modifiedby                               BigInt?
  modifieddate                             DateTime? @db.Timestamp(6)
  deletedby                                BigInt?
  deleteddate                              DateTime? @db.Timestamp(6)
  users_ledgertaxmapping_createdbyTousers  users?    @relation("ledgertaxmapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_ltm")
  users_ledgertaxmapping_deletedbyTousers  users?    @relation("ledgertaxmapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_ltm")
  ledgers                                  ledgers?  @relation(fields: [ledgerid], references: [ledgerid], onDelete: Cascade, map: "ltm_l_ledgerid")
  users_ledgertaxmapping_modifiedbyTousers users?    @relation("ledgertaxmapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_ltm")

  @@index([createdby], map: "createdby_u_ltm_idx")
  @@index([deletedby], map: "deletedby_u_ltm_idx")
  @@index([ledgerid], map: "ltm_l_ledgerid_idx")
  @@index([modifiedby], map: "modifyby_u_ltm_idx")
}

model ledgerusermapping {
  lumid                                     BigInt    @id @default(autoincrement())
  ledgerid                                  BigInt?
  uid                                       BigInt?
  isdeleted                                 Boolean?  @default(false)
  createdby                                 BigInt?
  createddate                               DateTime? @default(now()) @db.Timestamp(6)
  modifiedby                                BigInt?
  modifieddate                              DateTime? @db.Timestamp(6)
  deletedby                                 BigInt?
  deleteddate                               DateTime? @db.Timestamp(6)
  users_ledgerusermapping_createdbyTousers  users?    @relation("ledgerusermapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_lum")
  users_ledgerusermapping_deletedbyTousers  users?    @relation("ledgerusermapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_lum")
  ledgers                                   ledgers?  @relation(fields: [ledgerid], references: [ledgerid], onDelete: Cascade, map: "lm_l_ledgerid")
  users_ledgerusermapping_uidTousers        users?    @relation("ledgerusermapping_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "lm_u_uid")
  users_ledgerusermapping_modifiedbyTousers users?    @relation("ledgerusermapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_lum")

  @@index([createdby], map: "createdby_u_lum_idx")
  @@index([deletedby], map: "deletedby_u_lum_idx")
  @@index([ledgerid], map: "lm_l_ledgerid_idx")
  @@index([uid], map: "lm_u_uid_idx")
  @@index([modifiedby], map: "modifyby_u_lum_idx")
}

model manufacturer {
  Id                             BigInt        @id @default(autoincrement())
  Name                           String        @db.VarChar(400)
  MetaKeywords                   String?       @db.VarChar(400)
  MetaTitle                      String?       @db.VarChar(400)
  PageSizeOptions                String?       @db.VarChar(200)
  Description                    String?
  ManufacturerTemplateId         Int
  MetaDescription                String?
  PictureId                      Int
  PageSize                       Int
  AllowCustomersToSelectPageSize Int           @db.SmallInt
  SubjectToAcl                   Int           @db.SmallInt
  LimitedToStores                Int           @db.SmallInt
  Published                      Int           @db.SmallInt
  isdeleted                      Int           @db.SmallInt
  DisplayOrder                   Int
  CreatedOnUtc                   DateTime      @db.Timestamp(6)
  UpdatedOnUtc                   DateTime      @db.Timestamp(6)
  PriceRangeFiltering            Int           @db.SmallInt
  PriceFrom                      Decimal       @db.Decimal(18, 4)
  PriceTo                        Decimal       @db.Decimal(18, 4)
  ManuallyPriceRange             Int           @db.SmallInt
  pmanmapping                    pmanmapping[]

  @@index([DisplayOrder], map: "ix_manufacturer_displayorder")
  @@index([LimitedToStores], map: "ix_manufacturer_limitedtostores")
  @@index([SubjectToAcl], map: "ix_manufacturer_subjecttoacl")
}

model master {
  masterid     BigInt         @id @default(autoincrement())
  mastername   String?        @db.VarChar(100)
  mastervalues mastervalues[]
}

model mastervalues {
  mvid                                                                  BigInt                  @id @default(autoincrement())
  masterid                                                              BigInt
  mastervalue                                                           String?                 @db.VarChar(100)
  uoid                                                                  BigInt?
  isdeleted                                                             Boolean                 @default(false)
  createdby                                                             BigInt?
  createddate                                                           DateTime?               @default(now()) @db.Timestamp(6)
  modifiedby                                                            BigInt?
  modifieddate                                                          DateTime?               @default(now()) @db.Timestamp(6)
  deletedby                                                             BigInt?
  deleteddate                                                           DateTime?               @db.Timestamp(6)
  bom                                                                   bom[]
  currencies                                                            currencies[]
  deliveryreturns                                                       deliveryreturns[]
  expenses                                                              expenses[]
  users_mastervalues_createdbyTousers                                   users?                  @relation("mastervalues_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_mv")
  users_mastervalues_deletedbyTousers                                   users?                  @relation("mastervalues_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_mv")
  users_mastervalues_modifiedbyTousers                                  users?                  @relation("mastervalues_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_mv")
  master                                                                master                  @relation(fields: [masterid], references: [masterid], onDelete: Cascade, map: "mv_m_masterid")
  userorganization                                                      userorganization?       @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "mv_uo_uoid")
  offers                                                                offers[]
  orderdeliverytracking_orderdeliverytracking_statusTomastervalues      orderdeliverytracking[] @relation("orderdeliverytracking_statusTomastervalues")
  orderdeliverytracking_orderdeliverytracking_odtshiptypeTomastervalues orderdeliverytracking[] @relation("orderdeliverytracking_odtshiptypeTomastervalues")
  orderitems                                                            orderitems[]
  orders_orders_discbasisTomastervalues                                 orders[]                @relation("orders_discbasisTomastervalues")
  orders_orders_serving_typeTomastervalues                              orders[]                @relation("orders_serving_typeTomastervalues")
  orders_orders_ordersourceTomastervalues                               orders[]                @relation("orders_ordersourceTomastervalues")
  orders_orders_orderstatusTomastervalues                               orders[]                @relation("orders_orderstatusTomastervalues")
  orders_orders_ordertermsTomastervalues                                orders[]                @relation("orders_ordertermsTomastervalues")
  ordertaxdetails_ordertaxdetails_ordertaxbasisTomastervalues           ordertaxdetails[]       @relation("ordertaxdetails_ordertaxbasisTomastervalues")
  ordertaxdetails_ordertaxdetails_ordertaxtypeidTomastervalues          ordertaxdetails[]       @relation("ordertaxdetails_ordertaxtypeidTomastervalues")
  payment                                                               payment[]
  prowastage                                                            prowastage[]
  psverification                                                        psverification[]
  stockconversion                                                       stockconversion[]
  stocktransfer                                                         stocktransfer[]
  table_information                                                     table_information[]
  uom_mapping                                                           uom_mapping[]
  users_users_accountstatusTomastervalues                               users[]                 @relation("users_accountstatusTomastervalues")
  users_users_marketsegementTomastervalues                              users[]                 @relation("users_marketsegementTomastervalues")
  users_users_profilestatusTomastervalues                               users[]                 @relation("users_profilestatusTomastervalues")

  @@index([createdby], map: "createdby_u_mv_idx")
  @@index([deletedby], map: "deletedby_u_mv_idx")
  @@index([modifiedby], map: "modifyby_u_mv_idx")
  @@index([masterid], map: "mv_m_masterid_idx")
  @@index([uoid], map: "mv_uo_uoid_idx")
}

model materialattachment {
  mraid           BigInt           @id @default(autoincrement())
  mrid            BigInt?
  umid            BigInt?
  materialrequest materialrequest? @relation(fields: [mrid], references: [mrid], onDelete: Cascade, map: "mrid_mr_mra")
  userimages      userimages?      @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_um_mra")

  @@index([mrid], map: "mrid_mr_mra_idx")
  @@index([umid], map: "umid_um_mra_idx")
}

model materialrequest {
  mrid                                    BigInt                 @id @default(autoincrement())
  mrtype                                  Boolean?               @default(false)
  uoid                                    BigInt?
  seriesid                                BigInt?
  mrno                                    Int?
  sourcewarehouse                         BigInt?
  targetwarehouse                         BigInt?
  mrdate                                  DateTime?              @db.Timestamp(6)
  mrrequireddate                          DateTime?              @db.Timestamp(6)
  ordertandc                              String?
  isdeleted                               Boolean                @default(false)
  createdby                               BigInt?
  createddate                             DateTime?              @default(now()) @db.Timestamp(6)
  modifiedby                              BigInt?
  modifieddate                            DateTime?              @db.Timestamp(6)
  deletedby                               BigInt?
  deleteddate                             DateTime?              @db.Timestamp(6)
  isapproved                              Boolean?
  approvedby                              BigInt?
  approveddate                            DateTime?              @db.Timestamp(6)
  status                                  BigInt?
  isexternal                              Boolean?
  materialattachment                      materialattachment[]
  users_materialrequest_approvedbyTousers users?                 @relation("materialrequest_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_mr")
  users_materialrequest_createdbyTousers  users?                 @relation("materialrequest_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_mr")
  users_materialrequest_deletedbyTousers  users?                 @relation("materialrequest_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_mr")
  users_materialrequest_modifiedbyTousers users?                 @relation("materialrequest_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_mr")
  userorganization                        userorganization?      @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "orgid_org_mr")
  series                                  series?                @relation(fields: [seriesid], references: [sid], onDelete: Cascade, map: "sid_s_mr")
  materialrequestitems                    materialrequestitems[]
  mridetails                              mridetails[]
  orders                                  orders[]

  @@index([approvedby], map: "approvedby_u_mr_idx")
  @@index([createdby], map: "createdby_u_mr_idx")
  @@index([deletedby], map: "deletedby_u_mr_idx")
  @@index([modifiedby], map: "modifyby_u_mr_idx")
  @@index([uoid], map: "orgid_org_mr_idx")
  @@index([seriesid], map: "sid_s_mr_idx")
}

model materialrequestitems {
  mriid                                           BigInt           @id @default(autoincrement())
  mrid                                            BigInt?
  proid                                           BigInt?
  pvid                                            BigInt?
  price                                           Decimal          @db.Decimal(10, 0)
  updatedprice                                    Decimal?         @db.Decimal(10, 0)
  itemqty                                         Decimal?         @db.Decimal(18, 4)
  itemtargetlocation                              BigInt?
  itemrequestby                                   BigInt?
  itemuom                                         BigInt?
  itemuomcfactor                                  Decimal?         @db.Decimal(8, 2)
  itemselecteduom                                 BigInt?
  isdeleted                                       Boolean          @default(false)
  createdby                                       BigInt?
  createddate                                     DateTime?        @default(now()) @db.Timestamp(6)
  modifiedby                                      BigInt?
  modifieddate                                    DateTime?        @db.Timestamp(6)
  deletedby                                       BigInt?
  deleteddate                                     DateTime?        @db.Timestamp(6)
  isapproved                                      Boolean?
  approvedby                                      BigInt?
  approveddate                                    DateTime?        @db.Timestamp(6)
  avialableitemqty                                Decimal?         @db.Decimal(18, 4)
  users_materialrequestitems_approvedbyTousers    users?           @relation("materialrequestitems_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_mri")
  users_materialrequestitems_createdbyTousers     users?           @relation("materialrequestitems_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_mri")
  users_materialrequestitems_deletedbyTousers     users?           @relation("materialrequestitems_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_mri")
  users_materialrequestitems_itemrequestbyTousers users?           @relation("materialrequestitems_itemrequestbyTousers", fields: [itemrequestby], references: [uid], onDelete: Cascade, map: "irb_u_mri")
  unitofmeasure                                   unitofmeasure?   @relation(fields: [itemuom], references: [uomid], onDelete: Cascade, map: "itemuom_uom_mri")
  users_materialrequestitems_modifiedbyTousers    users?           @relation("materialrequestitems_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_mri")
  materialrequest                                 materialrequest? @relation(fields: [mrid], references: [mrid], onDelete: Cascade, map: "mrid_mr_mri")
  product                                         product?         @relation(fields: [proid], references: [proid], onDelete: NoAction, onUpdate: NoAction, map: "proid_pro_mri")
  provariants                                     provariants?     @relation(fields: [pvid], references: [pvid], onDelete: NoAction, onUpdate: NoAction, map: "provid_prov_mri")
  mridetails                                      mridetails[]

  @@index([approvedby], map: "approvedby_u_mri_idx")
  @@index([createdby], map: "createdby_u_mri_idx")
  @@index([deletedby], map: "deletedby_u_mri_idx")
  @@index([itemrequestby], map: "irb_u_mri_idx")
  @@index([itemuom], map: "itemuom_uom_mri_idx")
  @@index([itemtargetlocation], map: "itl_ua_mri_idx")
  @@index([modifiedby], map: "modifyby_u_mri_idx")
  @@index([mrid], map: "mrid_mr_mri_idx")
  @@index([proid], map: "proid_pro_mri_idx")
  @@index([pvid], map: "provid_prov_mri_idx")
}

model mridetails {
  mridid                             BigInt                @id @default(autoincrement())
  mriid                              BigInt?
  mrid                               BigInt?
  attributeid                        BigInt?
  attrvalue                          String?
  isdeleted                          Boolean               @default(false)
  createdby                          BigInt?
  createddate                        DateTime?             @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?             @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?             @db.Timestamp(6)
  isapproved                         Boolean?
  approvedby                         BigInt?
  approveddate                       DateTime?             @db.Timestamp(6)
  users_mridetails_approvedbyTousers users?                @relation("mridetails_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_mrid")
  attributes                         attributes?           @relation(fields: [attributeid], references: [attributeid], onDelete: Cascade, map: "attrid_att_md")
  users_mridetails_createdbyTousers  users?                @relation("mridetails_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_mrid")
  users_mridetails_deletedbyTousers  users?                @relation("mridetails_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_mrid")
  users_mridetails_modifiedbyTousers users?                @relation("mridetails_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_mrid")
  materialrequest                    materialrequest?      @relation(fields: [mrid], references: [mrid], onDelete: Cascade, map: "mrid_mr_mrid")
  materialrequestitems               materialrequestitems? @relation(fields: [mriid], references: [mriid], onDelete: Cascade, map: "mriid_mri_md")

  @@index([approvedby], map: "approvedby_u_mrid_idx")
  @@index([attributeid], map: "attrid_att_md_idx")
  @@index([createdby], map: "createdby_u_mrid_idx")
  @@index([deletedby], map: "deletedby_u_mrid_idx")
  @@index([modifiedby], map: "modifyby_u_mrid_idx")
  @@index([mrid], map: "mrid_mr_mrid_idx")
  @@index([mriid], map: "mriid_mri_md_idx")
}

model notifications {
  id           Int       @id @default(autoincrement())
  user_id      Int
  title        String    @db.VarChar(255)
  message      String
  type         String    @db.VarChar(50)
  reference_id Int?
  is_read      Boolean?  @default(false)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
}

model odtitemsmapping {
  odtimid                                 BigInt                 @id @default(autoincrement())
  odtid                                   BigInt?
  oitemsid                                BigInt?
  deliveredqty                            Decimal?               @db.Decimal(19, 4)
  recivedqty                              Decimal?               @db.Decimal(19, 4)
  dom                                     DateTime?              @db.Timestamp(6)
  doe                                     DateTime?              @db.Timestamp(6)
  bcode                                   String?                @db.VarChar(50)
  fcode                                   String?                @db.VarChar(50)
  isdeleted                               Boolean?               @default(false)
  createdby                               BigInt?
  createddate                             DateTime?              @default(now()) @db.Timestamp(6)
  modifiedby                              BigInt?
  modifieddate                            DateTime?              @db.Timestamp(6)
  deletedby                               BigInt?
  deleteddate                             DateTime?              @db.Timestamp(6)
  isapproved                              Boolean?
  approvedby                              BigInt?
  approveddate                            DateTime?              @db.Timestamp(6)
  deliveryreturns                         deliveryreturns[]
  users_odtitemsmapping_approvedbyTousers users?                 @relation("odtitemsmapping_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_oim")
  users_odtitemsmapping_createdbyTousers  users?                 @relation("odtitemsmapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_oim")
  users_odtitemsmapping_deletedbyTousers  users?                 @relation("odtitemsmapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_oim")
  users_odtitemsmapping_modifiedbyTousers users?                 @relation("odtitemsmapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_oim")
  orderdeliverytracking                   orderdeliverytracking? @relation(fields: [odtid], references: [odtid], onDelete: Cascade, map: "odtid_odm_oim")
  orderitems                              orderitems?            @relation(fields: [oitemsid], references: [oitemsid], onDelete: Cascade, map: "oitemsid_oi_oim")
  orderreturns                            orderreturns[]

  @@index([approvedby], map: "approvedby_u_oim_idx")
  @@index([createdby], map: "createdby_u_oim_idx")
  @@index([deletedby], map: "deletedby_u_oim_idx")
  @@index([modifiedby], map: "modifyby_u_oim_idx")
  @@index([odtid], map: "odtid_odm_oim_idx")
  @@index([oitemsid], map: "oitemsid_oi_oim_idx")
}

model offermappings {
  omid    BigInt   @id @default(autoincrement())
  offerid BigInt?
  idtype  Int?
  forid   BigInt?
  isfree  Boolean?
  offers  offers?  @relation(fields: [offerid], references: [offerid], onDelete: Cascade, map: "offerid_offer_ofm")

  @@index([offerid], map: "offerid_offer_ofm_idx")
}

model offers {
  offerid                        BigInt          @id @default(autoincrement())
  offername                      String?         @db.VarChar(250)
  offerdescription               String?
  couponcode                     String?         @db.VarChar(50)
  termscondi                     String?
  startdate                      DateTime?       @db.Timestamp(6)
  enddate                        DateTime?       @db.Timestamp(6)
  discpercentage                 Decimal?        @db.Decimal(5, 2)
  discmaxamount                  Decimal?        @db.Decimal(19, 2)
  discountmaxtimes               Decimal?        @db.Decimal(19, 2)
  itemprice                      Decimal?        @db.Decimal(19, 2)
  offertype                      Int?
  noofbuyproducts                Int?
  nooffreeproducts               Int?
  isclubbable                    Boolean?
  resetdays                      Int?
  discbasis                      BigInt?
  mincartamount                  Decimal?        @db.Decimal(10, 0)
  cardtype                       BigInt?
  createdby                      BigInt?
  createddate                    DateTime?       @default(now()) @db.Timestamp(6)
  modifiedby                     BigInt?
  modifieddate                   DateTime?       @db.Timestamp(6)
  isdeleted                      Boolean         @default(false)
  deletedby                      BigInt?
  deleteddate                    DateTime?       @db.Timestamp(6)
  isapproved                     Boolean         @default(false)
  approvedby                     BigInt?
  approveddate                   DateTime?       @db.Timestamp(6)
  uoid                           BigInt?
  uaid                           BigInt?
  offermappings                  offermappings[]
  users_offers_approvedbyTousers users?          @relation("offers_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_offr")
  users_offers_createdbyTousers  users?          @relation("offers_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_offr")
  mastervalues                   mastervalues?   @relation(fields: [discbasis], references: [mvid], onDelete: Cascade, map: "dbid_mv_of")
  users_offers_deletedbyTousers  users?          @relation("offers_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_offr")
  users_offers_modifiedbyTousers users?          @relation("offers_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_offr")
  offerusage                     offerusage[]

  @@index([approvedby], map: "approvedby_u_of_idx")
  @@index([approvedby], map: "approvedby_u_offr_idx")
  @@index([createdby], map: "createdby_u_of_idx")
  @@index([createdby], map: "createdby_u_offr_idx")
  @@index([discbasis], map: "dbid_mv_of_idx")
  @@index([deletedby], map: "deletedby_u_of_idx")
  @@index([deletedby], map: "deletedby_u_offr_idx")
  @@index([modifiedby], map: "modifyby_u_of_idx")
  @@index([modifiedby], map: "modifyby_u_offr_idx")
}

model offerusage {
  offerusegid                        BigInt            @id @default(autoincrement())
  offerid                            BigInt?
  uid                                BigInt?
  uoid                               BigInt?
  discountvalue                      Decimal?          @db.Decimal(19, 2)
  usagedate                          DateTime?         @db.Timestamp(6)
  isdeleted                          Boolean?          @default(false)
  createdby                          BigInt?
  createddate                        DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?         @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?         @db.Timestamp(6)
  isapproved                         Boolean           @default(false)
  approvedby                         BigInt?
  approveddate                       DateTime?         @db.Timestamp(6)
  users_offerusage_approvedbyTousers users?            @relation("offerusage_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_ofu")
  users_offerusage_createdbyTousers  users?            @relation("offerusage_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_ofu")
  users_offerusage_deletedbyTousers  users?            @relation("offerusage_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_ofu")
  users_offerusage_modifiedbyTousers users?            @relation("offerusage_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_ofu")
  offers                             offers?           @relation(fields: [offerid], references: [offerid], onDelete: Cascade, map: "ofid_of_ofu")
  users_offerusage_uidTousers        users?            @relation("offerusage_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_ofu")
  userorganization                   userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_ofu")

  @@index([approvedby], map: "approvedby_u_offu_idx")
  @@index([approvedby], map: "approvedby_u_ofu_idx")
  @@index([createdby], map: "createdby_u_offu_idx")
  @@index([createdby], map: "createdby_u_ofu_idx")
  @@index([deletedby], map: "deletedby_u_offu_idx")
  @@index([deletedby], map: "deletedby_u_ofu_idx")
  @@index([modifiedby], map: "modifyby_u_offu_idx")
  @@index([modifiedby], map: "modifyby_u_ofu_idx")
  @@index([offerid], map: "ofid_of_ofu_idx")
  @@index([uid], map: "uid_u_ofu_idx")
  @@index([uoid], map: "uoid_uo_ofu_idx")
}

model orderattachment {
  oaid       BigInt      @id @default(autoincrement())
  orderid    BigInt?
  umid       BigInt?
  orders     orders?     @relation(fields: [orderid], references: [orderid], onDelete: Cascade, map: "orderid_o_oa")
  userimages userimages? @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_o_um")

  @@index([orderid], map: "orderid_o_oa_idx")
  @@index([umid], map: "umid_o_um_idx")
}

model orderdeliverytracking {
  odtid                                                        BigInt                   @id @default(autoincrement())
  orderid                                                      BigInt?
  uoid                                                         BigInt?
  status                                                       BigInt?
  odtdate                                                      DateTime?                @db.Timestamp(6)
  odtshipper                                                   BigInt?
  odtno                                                        Int?
  odtshiptype                                                  BigInt?
  odtexpdeldate                                                DateTime?                @db.Timestamp(6)
  odtactualdate                                                DateTime?                @db.Timestamp(6)
  odtawbno                                                     String?                  @db.VarChar(45)
  odturl                                                       String?                  @db.VarChar(250)
  odtvehicleno                                                 String?                  @db.VarChar(50)
  isdeleted                                                    Boolean?                 @default(false)
  createdby                                                    BigInt?
  createddate                                                  DateTime?                @default(now()) @db.Timestamp(6)
  modifiedby                                                   BigInt?
  modifieddate                                                 DateTime?                @db.Timestamp(6)
  deletedby                                                    BigInt?
  deleteddate                                                  DateTime?                @db.Timestamp(6)
  isapproved                                                   Boolean?
  approvedby                                                   BigInt?
  approveddate                                                 DateTime?                @db.Timestamp(6)
  invoicedeliverymapping                                       invoicedeliverymapping[]
  odtitemsmapping                                              odtitemsmapping[]
  users_orderdeliverytracking_approvedbyTousers                users?                   @relation("orderdeliverytracking_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_odt")
  users_orderdeliverytracking_createdbyTousers                 users?                   @relation("orderdeliverytracking_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_odt")
  users_orderdeliverytracking_deletedbyTousers                 users?                   @relation("orderdeliverytracking_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_odt")
  users_orderdeliverytracking_modifiedbyTousers                users?                   @relation("orderdeliverytracking_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modfiyby_u_odt")
  mastervalues_orderdeliverytracking_statusTomastervalues      mastervalues?            @relation("orderdeliverytracking_statusTomastervalues", fields: [status], references: [mvid], onDelete: Cascade, map: "odt_mv_mvid")
  orders                                                       orders?                  @relation(fields: [orderid], references: [orderid], onDelete: Cascade, map: "odt_order_orderId")
  userorganization                                             userorganization?        @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "odt_uo_uoid")
  users_orderdeliverytracking_odtshipperTousers                users?                   @relation("orderdeliverytracking_odtshipperTousers", fields: [odtshipper], references: [uid], onDelete: Cascade, map: "odtshipper_u_odt")
  mastervalues_orderdeliverytracking_odtshiptypeTomastervalues mastervalues?            @relation("orderdeliverytracking_odtshiptypeTomastervalues", fields: [odtshiptype], references: [mvid], onDelete: Cascade, map: "odtspt_mv_odt")

  @@index([approvedby], map: "approvedby_u_odt_idx")
  @@index([createdby], map: "createdby_u_odt_idx")
  @@index([deletedby], map: "deletedby_u_odt_idx")
  @@index([modifiedby], map: "modfiyby_u_odt_idx")
  @@index([status], map: "odt_mv_mvid_idx")
  @@index([orderid], map: "odt_order_orderid_idx")
  @@index([uoid], map: "odt_uo_uoid_idx")
  @@index([odtshipper], map: "odtshipper_u_odt_idx")
  @@index([odtshiptype], map: "odtspt_mv_odt_idx")
}

model orderitemdetails {
  oidid                                    BigInt           @id @default(autoincrement())
  oitemsid                                 BigInt?
  orderid                                  BigInt?
  attributeid                              BigInt?
  attrvalue                                String?
  isdeleted                                Boolean?         @default(false)
  createdby                                BigInt?
  createddate                              DateTime?        @default(now()) @db.Timestamp(6)
  modifiedby                               BigInt?
  modifieddate                             DateTime?        @db.Timestamp(6)
  deletedby                                BigInt?
  deleteddate                              DateTime?        @db.Timestamp(6)
  isapproved                               Boolean?
  approvedby                               BigInt?
  approveddate                             DateTime?        @db.Timestamp(6)
  avid                                     BigInt?
  users_orderitemdetails_approvedbyTousers users?           @relation("orderitemdetails_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_oid")
  attributes                               attributes?      @relation(fields: [attributeid], references: [attributeid], onDelete: Cascade, map: "attrid_att_oid")
  attributevalues                          attributevalues? @relation(fields: [avid], references: [avid], onDelete: Cascade, map: "avid_attrval_oid")
  users_orderitemdetails_createdbyTousers  users?           @relation("orderitemdetails_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_oid")
  users_orderitemdetails_deletedbyTousers  users?           @relation("orderitemdetails_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_oid")
  users_orderitemdetails_modifiedbyTousers users?           @relation("orderitemdetails_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_oid")
  orderitems                               orderitems?      @relation(fields: [oitemsid], references: [oitemsid], onDelete: Cascade, map: "oitemsid_oitem_oid")
  orders                                   orders?          @relation(fields: [orderid], references: [orderid], onDelete: Cascade, map: "orderid_o_oid")

  @@index([approvedby], map: "approvedby_u_oid_idx")
  @@index([attributeid], map: "attrid_att_oid_idx")
  @@index([createdby], map: "createdby_u_oid_idx")
  @@index([deletedby], map: "deletedby_u_oid_idx")
  @@index([modifiedby], map: "modifyby_u_oid_idx")
  @@index([oitemsid], map: "oiid_oitem_oid_idx")
  @@index([orderid], map: "orderid_o_oid_idx")
}

model orderitems {
  oitemsid                                                BigInt             @id @default(autoincrement())
  orderid                                                 BigInt?
  proid                                                   BigInt?
  pvid                                                    BigInt?
  reqdeliverydate                                         DateTime?          @db.Timestamp(6)
  expdeliverydate                                         DateTime?          @db.Timestamp(6)
  itemuom                                                 BigInt?
  itemuomcfactor                                          Decimal?           @db.Decimal(8, 2)
  itemselecteduom                                         BigInt?
  itemqty                                                 Decimal?           @db.Decimal(19, 4)
  deliveredqty                                            Decimal?           @db.Decimal(19, 4)
  recivedqty                                              Decimal?           @db.Decimal(19, 4)
  itemrate                                                Decimal?           @db.Decimal(19, 4)
  itemamount                                              Decimal?           @db.Decimal(19, 4)
  itemtaxrate                                             Decimal?           @db.Decimal(5, 2)
  itemtaxamount                                           Decimal?           @db.Decimal(19, 4)
  itemgrossamt                                            Decimal?           @db.Decimal(19, 4)
  itemnote                                                String?            @db.VarChar(250)
  ledgerid                                                BigInt?
  isdeleted                                               Boolean?           @default(false)
  createdby                                               BigInt?
  createddate                                             DateTime?          @default(now()) @db.Timestamp(6)
  modifiedby                                              BigInt?
  modifieddate                                            DateTime?          @db.Timestamp(6)
  deletedby                                               BigInt?
  deleteddate                                             DateTime?          @db.Timestamp(6)
  isapproved                                              Boolean?
  approvedby                                              BigInt?
  approveddate                                            DateTime?          @db.Timestamp(6)
  isdelivered                                             Boolean?
  varianceqty                                             Decimal?           @db.Decimal(19, 4)
  returnqty                                               Decimal?           @db.Decimal(19, 4)
  orderitem_status                                        BigInt?
  odtitemsmapping                                         odtitemsmapping[]
  orderitemdetails                                        orderitemdetails[]
  users_orderitems_approvedbyTousers                      users?             @relation("orderitems_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_oi")
  users_orderitems_createdbyTousers                       users?             @relation("orderitems_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_oi")
  users_orderitems_deletedbyTousers                       users?             @relation("orderitems_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_oi")
  unitofmeasure_orderitems_itemselecteduomTounitofmeasure unitofmeasure?     @relation("orderitems_itemselecteduomTounitofmeasure", fields: [itemselecteduom], references: [uomid], onDelete: Cascade, map: "itemselecteduom_uom_fk")
  unitofmeasure                                           unitofmeasure?     @relation(fields: [itemuom], references: [uomid], onDelete: Cascade, map: "itemuom_uom_ot")
  ledgers                                                 ledgers?           @relation(fields: [ledgerid], references: [ledgerid], onDelete: Cascade, map: "ldid_ld_ot")
  users_orderitems_modifiedbyTousers                      users?             @relation("orderitems_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_oi")
  orders                                                  orders?            @relation(fields: [orderid], references: [orderid], onDelete: Cascade, map: "orderid_or_ot")
  mastervalues                                            mastervalues?      @relation(fields: [orderitem_status], references: [mvid], map: "orderitems_orderitem_status_fk")
  product                                                 product?           @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_ot")
  provariants                                             provariants?       @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_ot")

  @@index([approvedby], map: "approvedby_u_oi_idx")
  @@index([createdby], map: "createdby_u_oi_idx")
  @@index([deletedby], map: "deletedby_u_oi_idx")
  @@index([itemuom], map: "itemuom_uom_ot_idx")
  @@index([ledgerid], map: "ldid_ld_ot_idx")
  @@index([modifiedby], map: "modifyby_u_oi_idx")
  @@index([orderid], map: "orderid_or_ot_idx")
  @@index([proid], map: "proid_p_ot_idx")
  @@index([pvid], map: "pvid_pv_ot_idx")
}

model orderreturns {
  return_id         BigInt          @id @default(autoincrement())
  odtitemsmappingid BigInt
  returnquantity    Decimal         @db.Decimal(18, 2)
  returnreason      String          @db.VarChar(255)
  returnstatus      BigInt
  createdby         BigInt
  createddate       DateTime        @default(now()) @db.Timestamp(6)
  approvedby        BigInt?
  approveddate      DateTime?       @db.Timestamp(6)
  odtitemsmapping   odtitemsmapping @relation(fields: [odtitemsmappingid], references: [odtimid], onDelete: Cascade, map: "orderreturns_ibfk_1")

  @@index([returnstatus], map: "orderreturns_masterval_returnstatusfk_idx")
}

model orders {
  orderid                                          BigInt                  @id @default(autoincrement())
  ordertype                                        Boolean?
  isfa                                             Boolean?                @default(false)
  uoid                                             BigInt?
  orderno                                          Int?
  otherpartyorderno                                String?                 @db.VarChar(500)
  orderseriesid                                    BigInt?
  orderdate                                        DateTime?               @db.Timestamp(6)
  orderstatus                                      BigInt?
  orderterms                                       BigInt?
  orderremarks                                     String?
  ordernote                                        String?
  orderjurisidiction                               String?                 @db.VarChar(500)
  ordersupplystate                                 BigInt?
  orderstate                                       BigInt?
  orderitemtotal                                   Decimal?                @db.Decimal(19, 4)
  ordertaxtotal                                    Decimal?                @db.Decimal(19, 4)
  orderledgertotal                                 Decimal?                @db.Decimal(19, 4)
  orderdiscount                                    Decimal?                @db.Decimal(19, 4)
  ordertotal                                       Decimal?                @db.Decimal(19, 4)
  deliverydate                                     DateTime?               @db.Timestamp(6)
  buyerid                                          BigInt
  sellerid                                         BigInt?
  consigneeid                                      BigInt?
  promocode                                        String?                 @db.VarChar(50)
  discpercentage                                   Decimal?                @db.Decimal(4, 2)
  discamount                                       Decimal?                @db.Decimal(19, 4)
  discbasis                                        BigInt?
  ordertandc                                       String?
  ordersource                                      BigInt?
  ordercampaign                                    BigInt?
  orderdeliverfrom                                 BigInt?
  orderdeliverto                                   BigInt?
  shippingruleid                                   BigInt?
  isinternalorder                                  Boolean?
  isdeleted                                        Boolean?                @default(false)
  createdby                                        BigInt?
  createddate                                      DateTime?               @default(now()) @db.Timestamp(6)
  modifiedby                                       BigInt?
  modifieddate                                     DateTime?               @db.Timestamp(6)
  deletedby                                        BigInt?
  deleteddate                                      DateTime?               @db.Timestamp(6)
  isapproved                                       Boolean?
  approvedby                                       BigInt?
  approveddate                                     DateTime?               @db.Timestamp(6)
  paymentstatus                                    Int?
  shippingstatus                                   Int?
  materialrequestid                                BigInt?
  table_id                                         Int?
  booking_id                                       Int?
  serving_type                                     BigInt?
  invoices                                         invoices[]
  orderattachment                                  orderattachment[]
  orderdeliverytracking                            orderdeliverytracking[]
  orderitemdetails                                 orderitemdetails[]
  orderitems                                       orderitems[]
  users_orders_approvedbyTousers                   users?                  @relation("orders_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_or")
  users_orders_buyeridTousers                      users                   @relation("orders_buyeridTousers", fields: [buyerid], references: [uid], onDelete: Cascade, map: "bid_u_or")
  users_orders_consigneeidTousers                  users?                  @relation("orders_consigneeidTousers", fields: [consigneeid], references: [uid], onDelete: Cascade, map: "cid_u_or")
  users_orders_createdbyTousers                    users?                  @relation("orders_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_or")
  mastervalues_orders_discbasisTomastervalues      mastervalues?           @relation("orders_discbasisTomastervalues", fields: [discbasis], references: [mvid], onDelete: Cascade, map: "db_mv_or")
  users_orders_deletedbyTousers                    users?                  @relation("orders_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_or")
  table_bookings                                   table_bookings?         @relation(fields: [booking_id], references: [booking_id], map: "fk_orders_booking_id")
  mastervalues_orders_serving_typeTomastervalues   mastervalues?           @relation("orders_serving_typeTomastervalues", fields: [serving_type], references: [mvid], onDelete: Restrict, map: "fk_orders_serving_type")
  table_information                                table_information?      @relation(fields: [table_id], references: [table_id], map: "fk_orders_table_id")
  users_orders_modifiedbyTousers                   users?                  @relation("orders_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_or")
  materialrequest                                  materialrequest?        @relation(fields: [materialrequestid], references: [mrid], onDelete: Cascade, map: "mrid_or")
  useraddress_orders_orderdeliverfromTouseraddress useraddress?            @relation("orders_orderdeliverfromTouseraddress", fields: [orderdeliverfrom], references: [uaid], onDelete: Cascade, map: "odf_ua_or")
  useraddress_orders_orderdelivertoTouseraddress   useraddress?            @relation("orders_orderdelivertoTouseraddress", fields: [orderdeliverto], references: [uaid], onDelete: Cascade, map: "odt_ua_or")
  userorganization                                 userorganization?       @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "ord_org_uoid")
  mastervalues_orders_ordersourceTomastervalues    mastervalues?           @relation("orders_ordersourceTomastervalues", fields: [ordersource], references: [mvid], onDelete: Cascade, map: "ors_mv_or")
  mastervalues_orders_orderstatusTomastervalues    mastervalues?           @relation("orders_orderstatusTomastervalues", fields: [orderstatus], references: [mvid], onDelete: Cascade, map: "os_mv_or")
  states_orders_orderstateTostates                 states?                 @relation("orders_orderstateTostates", fields: [orderstate], references: [stateid], onDelete: Cascade, map: "os_s_or")
  states_orders_ordersupplystateTostates           states?                 @relation("orders_ordersupplystateTostates", fields: [ordersupplystate], references: [stateid], onDelete: Cascade, map: "oss_s_or")
  mastervalues_orders_ordertermsTomastervalues     mastervalues?           @relation("orders_ordertermsTomastervalues", fields: [orderterms], references: [mvid], onDelete: Cascade, map: "ot_mv_or")
  users_orders_selleridTousers                     users?                  @relation("orders_selleridTousers", fields: [sellerid], references: [uid], onDelete: Cascade, map: "sellerid_u_or")
  ordersalescommision                              ordersalescommision[]
  ordertaxdetails                                  ordertaxdetails[]

  @@index([approvedby], map: "approvedby_u_or_idx")
  @@index([buyerid], map: "bid_u_or_idx")
  @@index([consigneeid], map: "cid_u_or_idx")
  @@index([createdby], map: "createdby_u_or_idx")
  @@index([discbasis], map: "db_mv_or_idx")
  @@index([deletedby], map: "deletedby_u_or_idx")
  @@index([modifiedby], map: "modifyby_u_or_idx")
  @@index([materialrequestid], map: "mrid_or_idx")
  @@index([orderdeliverfrom], map: "odf_ua_or_idx")
  @@index([orderdeliverto], map: "odt_ua_or_idx")
  @@index([uoid], map: "ord_org_uoid_idx")
  @@index([ordersource], map: "ors_mv_or_idx")
  @@index([orderstatus], map: "os_mv_or_idx")
  @@index([orderstate], map: "os_s_or_idx")
  @@index([ordersupplystate], map: "oss_s_or_idx")
  @@index([orderterms], map: "ot_mv_or_idx")
  @@index([sellerid], map: "sellerid_u_or_idx")
}

model ordersalescommision {
  oscid                                       BigInt    @id @default(autoincrement())
  orderid                                     BigInt?
  partnerid                                   BigInt?
  partnerledgerid                             BigInt?
  commissioncalcamount                        Decimal?  @db.Decimal(19, 4)
  commisionperc                               Decimal?  @db.Decimal(5, 2)
  commisionamount                             Decimal?  @db.Decimal(19, 4)
  commisionbasis                              BigInt?
  isdeleted                                   Boolean?  @default(false)
  createdby                                   BigInt?
  createddate                                 DateTime? @default(now()) @db.Timestamp(6)
  modifiedby                                  BigInt?
  modifieddate                                DateTime? @db.Timestamp(6)
  deletedby                                   BigInt?
  deleteddate                                 DateTime? @db.Timestamp(6)
  isapproved                                  Boolean?
  approvedby                                  BigInt?
  approveddate                                DateTime? @db.Timestamp(6)
  users_ordersalescommision_approvedbyTousers users?    @relation("ordersalescommision_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_osc")
  users_ordersalescommision_createdbyTousers  users?    @relation("ordersalescommision_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_osc")
  users_ordersalescommision_deletedbyTousers  users?    @relation("ordersalescommision_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_osc")
  users_ordersalescommision_modifiedbyTousers users?    @relation("ordersalescommision_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_osc")
  orders                                      orders?   @relation(fields: [orderid], references: [orderid], onDelete: Cascade, map: "orid_or_orc")
  ledgers                                     ledgers?  @relation(fields: [partnerledgerid], references: [ledgerid], onDelete: Cascade, map: "plid_l_orc")

  @@index([approvedby], map: "approvedby_u_osc_idx")
  @@index([createdby], map: "createdby_u_osc_idx")
  @@index([deletedby], map: "deletedby_u_osc_idx")
  @@index([modifiedby], map: "modifyby_u_osc_idx")
  @@index([orderid], map: "orid_or_orc_idx")
  @@index([partnerledgerid], map: "plid_l_orc_idx")
}

model ordertaxdetails {
  otdid                                                     BigInt        @id @default(autoincrement())
  orderid                                                   BigInt?
  ordertaxtypeid                                            BigInt?
  ordertaxbasis                                             BigInt?
  ledgerid                                                  BigInt?
  ordertaxrate                                              Decimal?      @db.Decimal(6, 2)
  ordertaxableamount                                        Decimal?      @db.Decimal(19, 4)
  ordertaxamount                                            Decimal?      @db.Decimal(19, 4)
  isdeleted                                                 Boolean?      @default(false)
  createdby                                                 BigInt?
  createddate                                               DateTime?     @default(now()) @db.Timestamp(6)
  modifiedby                                                BigInt?
  modifieddate                                              DateTime?     @db.Timestamp(6)
  deletedby                                                 BigInt?
  deleteddate                                               DateTime?     @db.Timestamp(6)
  isapproved                                                Boolean?
  approvedby                                                BigInt?
  approveddate                                              DateTime?     @db.Timestamp(6)
  users_ordertaxdetails_approvedbyTousers                   users?        @relation("ordertaxdetails_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_otd")
  users_ordertaxdetails_createdbyTousers                    users?        @relation("ordertaxdetails_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_otd")
  users_ordertaxdetails_deletedbyTousers                    users?        @relation("ordertaxdetails_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_otd")
  ledgers                                                   ledgers?      @relation(fields: [ledgerid], references: [ledgerid], onDelete: Cascade, map: "lid_l_otd")
  users_ordertaxdetails_modifiedbyTousers                   users?        @relation("ordertaxdetails_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_otd")
  orders                                                    orders?       @relation(fields: [orderid], references: [orderid], onDelete: Cascade, map: "orid_or_otd")
  mastervalues_ordertaxdetails_ordertaxbasisTomastervalues  mastervalues? @relation("ordertaxdetails_ordertaxbasisTomastervalues", fields: [ordertaxbasis], references: [mvid], onDelete: Cascade, map: "otbid_mv_otd")
  mastervalues_ordertaxdetails_ordertaxtypeidTomastervalues mastervalues? @relation("ordertaxdetails_ordertaxtypeidTomastervalues", fields: [ordertaxtypeid], references: [mvid], onDelete: Cascade, map: "ottid_mv_otd")

  @@index([approvedby], map: "approvedby_u_otd_idx")
  @@index([createdby], map: "createdby_u_otd_idx")
  @@index([deletedby], map: "deletedby_u_otd_idx")
  @@index([ledgerid], map: "lid_l_otd_idx")
  @@index([modifiedby], map: "modifyby_u_otd_idx")
  @@index([orderid], map: "orid_or_otd_idx")
  @@index([ordertaxbasis], map: "otbid_mv_otd_idx")
  @@index([ordertaxtypeid], map: "ottid_mv_otd_idx")
}

model orgrolemapping {
  ormid            BigInt            @id @default(autoincrement())
  orgid            BigInt?
  roleid           BigInt?
  Isdeleted        Boolean?
  Createdby        BigInt?
  userorganization userorganization? @relation(fields: [orgid], references: [uoid], onDelete: Cascade, map: "orgtorole")
  roles            roles?            @relation(fields: [roleid], references: [roleid], onDelete: Cascade, map: "roletoorg")

  @@index([orgid], map: "orgtorole_idx")
  @@index([roleid], map: "roletoorg_idx")
}

model payment {
  payid                                 BigInt        @id @default(autoincrement())
  ptid                                  BigInt?
  ptype                                 Boolean?
  uid                                   BigInt?
  uoid                                  BigInt?
  status                                Boolean?
  currid                                BigInt?
  paymentdate                           DateTime?     @db.Timestamp(6)
  modeofpayment                         BigInt?
  accid                                 BigInt?
  banktransid                           String?       @db.VarChar(10)
  otpartyaccid                          BigInt?
  pnotes                                String?
  premarks                              String?
  amount                                Decimal?      @db.Decimal(19, 4)
  isdeleted                             Boolean?
  createdby                             BigInt?
  createddate                           DateTime?     @default(now()) @db.Timestamp(6)
  modifiedby                            BigInt?
  modifieddate                          DateTime?     @db.Timestamp(6)
  deletedby                             BigInt?
  deleteddate                           DateTime?     @db.Timestamp(6)
  isapproved                            Boolean?
  approvedby                            BigInt?
  approveddate                          DateTime?     @db.Timestamp(6)
  users_payment_approvedbyTousers       users?        @relation("payment_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "ab_u_pt")
  ledgers_payment_accidToledgers        ledgers?      @relation("payment_accidToledgers", fields: [accid], references: [ledgerid], onDelete: Cascade, map: "accid_l_pt")
  users_payment_createdbyTousers        users?        @relation("payment_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_pt")
  users_payment_deletedbyTousers        users?        @relation("payment_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_pt")
  users_payment_modifiedbyTousers       users?        @relation("payment_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_pt")
  ledgers_payment_otpartyaccidToledgers ledgers?      @relation("payment_otpartyaccidToledgers", fields: [otpartyaccid], references: [ledgerid], onDelete: Cascade, map: "otpartyaccid_l_pt")
  mastervalues                          mastervalues? @relation(fields: [ptid], references: [mvid], onDelete: Cascade, map: "ptid_mv_pt")

  @@index([approvedby], map: "ab_u_pt_idx")
  @@index([accid], map: "accid_l_pt_idx")
  @@index([createdby], map: "cb_u_pt_idx")
  @@index([deletedby], map: "db_u_pt_idx")
  @@index([modifiedby], map: "mb_u_pt_idx")
  @@index([otpartyaccid], map: "otpartyaccid_l_pt_idx")
  @@index([ptid], map: "ptid_mv_pt_idx")
}

model pmanmapping {
  pmmid        BigInt        @id @default(autoincrement())
  proid        BigInt?
  manid        BigInt?
  Isdeleted    Boolean?
  Createdby    BigInt?
  Modifiedby   BigInt?
  Modifieddate DateTime?     @db.Timestamp(6)
  manufacturer manufacturer? @relation(fields: [manid], references: [Id], onDelete: Cascade, map: "pmm_man")
  product      product?      @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "pmm_pro")

  @@index([proid], map: "pmm_man_idx")
  @@index([manid], map: "pmm_manid_idx")
}

model product {
  proid                           BigInt                   @id @default(autoincrement())
  proname                         String?                  @db.VarChar(250)
  proconfig                       Int?
  prodescription                  String?
  shortdescription                String?
  protype                         Boolean?                 @default(false)
  proisactive                     Boolean?                 @default(false)
  prouom                          BigInt?
  proisfa                         Boolean?                 @default(false)
  proorigin                       BigInt?
  prodisplayinweb                 Boolean?                 @default(false)
  expiryfrom                      Int?
  ispurchasable                   Boolean?                 @default(true)
  prowatermarkid                  BigInt?
  uoid                            BigInt?
  catid                           BigInt?
  createdby                       BigInt?
  createddate                     DateTime?                @default(now()) @db.Timestamp(6)
  modifiedby                      BigInt?
  modifieddate                    DateTime?                @db.Timestamp(6)
  isdeleted                       Boolean?                 @default(false)
  deletedby                       BigInt?
  deleteddate                     DateTime?                @db.Timestamp(6)
  price                           Decimal?                 @db.Decimal(10, 0)
  hasvarient                      Boolean?
  bomdetails                      bomdetails[]
  expensedetails                  expensedetails[]
  materialrequestitems            materialrequestitems[]
  orderitems                      orderitems[]
  pmanmapping                     pmanmapping[]
  categories                      categories?              @relation(fields: [catid], references: [catid], onDelete: Cascade, map: "catid_cat_pro")
  users_product_createdbyTousers  users?                   @relation("product_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_p")
  users_product_deletedbyTousers  users?                   @relation("product_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_p")
  users_product_modifiedbyTousers users?                   @relation("product_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_p")
  countries                       countries?               @relation(fields: [proorigin], references: [countryid], onDelete: Cascade, map: "proorigin_c_p")
  unitofmeasure                   unitofmeasure?           @relation(fields: [prouom], references: [uomid], onDelete: Cascade, map: "prouom_uom_p")
  userimages                      userimages?              @relation(fields: [prowatermarkid], references: [umid], onDelete: Cascade, map: "prowm_ui_p")
  userorganization                userorganization?        @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_p")
  productcategorymapping          productcategorymapping[]
  productcurrentstock             productcurrentstock[]
  productreview                   productreview[]
  prorate                         prorate[]
  protags                         protags[]
  provariantlocations             provariantlocations[]
  provariants                     provariants[]
  provarianttax                   provarianttax[]
  prowastage                      prowastage[]
  psverification                  psverification[]
  pvamapping                      pvamapping[]
  pvummapping                     pvummapping[]
  relatedproduct                  relatedproduct[]
  stockconversiondetails          stockconversiondetails[]
  stocktransactions               stocktransactions[]
  stocktransfer                   stocktransfer[]
  uom_mapping                     uom_mapping[]

  @@index([createdby], map: "createdby_u_p_idx")
  @@index([deletedby], map: "deletedby_u_p_idx")
  @@index([modifiedby], map: "modifyby_u_p_idx")
  @@index([catid], map: "procat_cat_pro_idx")
  @@index([proorigin], map: "proorigin_c_p_idx")
  @@index([prouom], map: "prouom_idx")
  @@index([prowatermarkid], map: "prowm_ui_p_idx")
  @@index([uoid], map: "uoid_uo_p_idx")
}

model productcategorymapping {
  id          BigInt     @id @default(autoincrement())
  proid       BigInt
  catid       BigInt
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  isdeleted   Boolean?
  createdby   BigInt?
  deletedby   BigInt?
  deleteddate DateTime?  @db.Timestamp(6)
  categories  categories @relation(fields: [catid], references: [catid], onDelete: Cascade, map: "pro_cat_map_catid_fk")
  product     product    @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "pro_cat_map_proid_fk")

  @@index([catid], map: "pro_cat_map_catid_fk_idx")
  @@index([proid], map: "pro_cat_map_proid_fk_idx")
}

model productcurrentstock {
  id                 BigInt            @id @default(autoincrement())
  orgid              BigInt?
  uaid               BigInt?
  proid              BigInt?
  pvid               BigInt?
  lastpurchasedprice Decimal?          @db.Decimal(10, 0)
  bqty               BigInt?
  reservedqty        BigInt?
  pendingqty         BigInt?
  pvstatus           BigInt?
  Isdeleted          Boolean?
  Createdby          BigInt?
  product            product?          @relation(fields: [proid], references: [proid], onDelete: NoAction, onUpdate: NoAction, map: "pcs_pro_map")
  provariants        provariants?      @relation(fields: [pvid], references: [pvid], onDelete: NoAction, onUpdate: NoAction, map: "pcs_pv_map")
  useraddress        useraddress?      @relation(fields: [uaid], references: [uaid], onDelete: NoAction, onUpdate: NoAction, map: "pcs_ua_map")
  userorganization   userorganization? @relation(fields: [orgid], references: [uoid], onDelete: NoAction, onUpdate: NoAction, map: "pcs_uo_map")

  @@index([proid], map: "pcs_pro_map_idx")
  @@index([pvid], map: "pcs_pv_map_idx")
  @@index([orgid], map: "pcs_pv_map_idx1")
  @@index([uaid], map: "pcs_ua_map_idx")
}

model productreview {
  reviewid                              BigInt    @id @default(autoincrement())
  proid                                 BigInt?
  reviewedby                            BigInt?
  reviewtitle                           String?   @db.VarChar(250)
  reviewdescription                     String?
  reviewimg                             String?
  isdeleted                             Boolean   @default(false)
  createdby                             BigInt?
  createddate                           DateTime? @default(now()) @db.Timestamp(6)
  modifiedby                            BigInt?
  modifieddate                          DateTime? @db.Timestamp(6)
  deletedby                             BigInt?
  deleteddate                           DateTime? @db.Timestamp(6)
  users_productreview_createdbyTousers  users?    @relation("productreview_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_pr")
  users_productreview_deletedbyTousers  users?    @relation("productreview_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_pr")
  users_productreview_modifiedbyTousers users?    @relation("productreview_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_pr")
  product                               product?  @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_pr")

  @@index([createdby], map: "createdby_u_pr_idx")
  @@index([deletedby], map: "deletedby_u_pr_idx")
  @@index([modifiedby], map: "modifyby_u_pr_idx")
  @@index([proid], map: "proid_p_pr_idx")
}

model prorate {
  prid                            BigInt            @id @default(autoincrement())
  prorateno                       Int?
  uoid                            BigInt?
  uaid                            BigInt?
  proid                           BigInt?
  pvid                            BigInt?
  applicabledate                  DateTime?         @db.Timestamp(6)
  rate                            Decimal?          @db.Decimal(19, 4)
  isdeleted                       Boolean?          @default(false)
  createdby                       BigInt?
  createddate                     DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                      BigInt?
  modifieddate                    DateTime?         @db.Timestamp(6)
  deletedby                       BigInt?
  deleteddate                     DateTime?         @db.Timestamp(6)
  users_prorate_createdbyTousers  users?            @relation("prorate_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "created_u_pr")
  users_prorate_deletedbyTousers  users?            @relation("prorate_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deleted_u_pr")
  users_prorate_modifiedbyTousers users?            @relation("prorate_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modified_u_pr")
  product                         product?          @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_pro_pr")
  provariants                     provariants?      @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_pr")
  useraddress                     useraddress?      @relation(fields: [uaid], references: [uaid], onDelete: Cascade, map: "uaid_ua_pr")
  userorganization                userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_pr")

  @@index([createdby], map: "created_u_pr_idx")
  @@index([deletedby], map: "deleted_u_pr_idx")
  @@index([modifiedby], map: "modified_u_pr_idx")
  @@index([proid], map: "proid_pro_pr_idx")
  @@index([pvid], map: "pvid_pv_pr_idx")
  @@index([uaid], map: "uaid_ua_pr_idx")
  @@index([uoid], map: "uoid_uo_pr_idx")
}

model protags {
  ptagsid                         BigInt    @id @default(autoincrement())
  proid                           BigInt?
  ptagname                        String?   @db.VarChar(250)
  protagscol                      String?   @db.VarChar(45)
  isdeleted                       Boolean?  @default(false)
  createdby                       BigInt?
  createddate                     DateTime? @db.Timestamp(6)
  modifiedby                      BigInt?
  modifieddate                    DateTime? @db.Timestamp(6)
  deletedby                       BigInt?
  deleteddate                     DateTime? @db.Timestamp(6)
  users_protags_createdbyTousers  users?    @relation("protags_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_pt")
  users_protags_deletedbyTousers  users?    @relation("protags_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_pt")
  users_protags_modifiedbyTousers users?    @relation("protags_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_pt")
  product                         product?  @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_pt")

  @@index([createdby], map: "createdby_u_pt_idx")
  @@index([deletedby], map: "deletedby_u_pt_idx")
  @@index([modifiedby], map: "modifyby_u_pt_idx")
  @@index([proid], map: "proid_p_pt_idx")
}

model provariantlocations {
  pvlid                                                          BigInt            @id @default(autoincrement())
  pvid                                                           BigInt?
  proid                                                          BigInt?
  uoid                                                           BigInt?
  warhouseid                                                     BigInt?
  autorenew                                                      Boolean?
  safetylevel                                                    Decimal           @default(0.0000) @db.Decimal(18, 4)
  reorderlevel                                                   Decimal?          @db.Decimal(18, 4)
  availabledate                                                  DateTime?         @db.Timestamp(6)
  enddate                                                        DateTime?         @db.Timestamp(6)
  openingstock                                                   Decimal?          @db.Decimal(18, 4)
  openingstockvalue                                              Decimal?          @db.Decimal(18, 4)
  openingstockdate                                               DateTime?         @db.Timestamp(6)
  closingstock                                                   Decimal?          @db.Decimal(18, 4)
  closingstockvalue                                              Decimal?          @db.Decimal(18, 4)
  closingstockdate                                               DateTime?         @db.Timestamp(6)
  isdeleted                                                      Boolean?          @default(false)
  createdby                                                      BigInt?
  createddate                                                    DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                                                     BigInt?
  modifieddate                                                   DateTime?         @db.Timestamp(6)
  deletedby                                                      BigInt?
  deleteddate                                                    DateTime?         @db.Timestamp(6)
  isapproved                                                     Boolean?
  approvedby                                                     BigInt?
  approveddate                                                   DateTime?         @db.Timestamp(6)
  min_stock_uom                                                  BigInt?
  par_stock_uom                                                  BigInt?
  closingstock_on                                                Int[]             @default([])
  users_provariantlocations_approvedbyTousers                    users?            @relation("provariantlocations_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "ab_u_pvl")
  users_provariantlocations_createdbyTousers                     users?            @relation("provariantlocations_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_pvl")
  users_provariantlocations_deletedbyTousers                     users?            @relation("provariantlocations_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_pvl")
  users_provariantlocations_modifiedbyTousers                    users?            @relation("provariantlocations_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_pvl")
  unitofmeasure_provariantlocations_min_stock_uomTounitofmeasure unitofmeasure?    @relation("provariantlocations_min_stock_uomTounitofmeasure", fields: [min_stock_uom], references: [uomid], onDelete: Cascade, map: "min_stock_uom_fk")
  unitofmeasure_provariantlocations_par_stock_uomTounitofmeasure unitofmeasure?    @relation("provariantlocations_par_stock_uomTounitofmeasure", fields: [par_stock_uom], references: [uomid], onDelete: Cascade, map: "par_stock_uom_fk")
  product                                                        product?          @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_pvl")
  provariants                                                    provariants?      @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_pvl")
  userorganization                                               userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_pvl")
  useraddress                                                    useraddress?      @relation(fields: [warhouseid], references: [uaid], onDelete: Cascade, map: "warhouseid_ua_pvl")

  @@index([approvedby], map: "ab_u_pvl_idx")
  @@index([createdby], map: "cb_u_pvl_idx")
  @@index([deletedby], map: "db_u_pvl_idx")
  @@index([modifiedby], map: "mb_u_pvl_idx")
  @@index([proid], map: "proid_p_pvl_idx")
  @@index([pvid], map: "pvid_pv_pvl_idx")
  @@index([uoid], map: "uoid_uo_pvl_idx")
  @@index([warhouseid], map: "warhouseid_ua_pvl_idx")
}

model provariants {
  pvid                                BigInt                   @id @default(autoincrement())
  proid                               BigInt?
  pvname                              String?                  @db.VarChar(250)
  pvdesc                              String?
  shortdesc                           String?
  pvbarcode                           String?                  @db.VarChar(50)
  pvsku                               String?                  @db.VarChar(50)
  pvdefaultimgid                      BigInt?
  pvstatus                            BigInt?
  pvcurrencyid                        BigInt?
  pvsalesprice                        Decimal?                 @db.Decimal(19, 4)
  pvpurchaseprice                     Decimal?                 @db.Decimal(19, 4)
  pvoldprice                          Decimal?                 @db.Decimal(19, 4)
  pvspecialprice                      Decimal?                 @db.Decimal(19, 4)
  pvspstartdate                       DateTime?                @db.Timestamp(6)
  pvspenddate                         DateTime?                @db.Timestamp(6)
  moq                                 Decimal?                 @db.Decimal(19, 4)
  isinclusive                         Boolean?                 @default(false)
  uoid                                BigInt?
  isdeleted                           Boolean?                 @default(false)
  createdby                           BigInt?
  createddate                         DateTime?                @default(now()) @db.Timestamp(6)
  modifiedby                          BigInt?
  modifieddate                        DateTime?                @db.Timestamp(6)
  deletedby                           BigInt?
  deleteddate                         DateTime?                @db.Timestamp(6)
  MarkAsNew                           Boolean?
  MarkAsNewStartDateTimeUtc           DateTime?                @db.Timestamp(6)
  MarkAsNewEndDateTimeUtc             DateTime?                @db.Timestamp(6)
  ispublished                         Boolean?
  displayOnHomePage                   Boolean?
  RequiredProductIds                  DateTime?                @db.Timestamp(6)
  admincomment                        String?
  availabledate                       DateTime?                @db.Timestamp(6)
  enddate                             DateTime?                @db.Timestamp(6)
  reconciliation_price                Decimal?                 @db.Decimal
  normal_loss                         Decimal?                 @db.Decimal
  bomdetails                          bomdetails[]
  materialrequestitems                materialrequestitems[]
  orderitems                          orderitems[]
  productcurrentstock                 productcurrentstock[]
  prorate                             prorate[]
  provariantlocations                 provariantlocations[]
  users_provariants_createdbyTousers  users?                   @relation("provariants_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_pv")
  currencies                          currencies?              @relation(fields: [pvcurrencyid], references: [currid], onDelete: Cascade, map: "currencyid_cu_pv")
  users_provariants_deletedbyTousers  users?                   @relation("provariants_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_pv")
  users_provariants_modifiedbyTousers users?                   @relation("provariants_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_pv")
  userimages                          userimages?              @relation(fields: [pvdefaultimgid], references: [umid], onDelete: Cascade, map: "prodefimg_ui_pv")
  product                             product?                 @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_pv")
  userorganization                    userorganization?        @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "pv_org_uoid")
  provarianttax                       provarianttax[]
  prowastage                          prowastage[]
  psverification                      psverification[]
  pvamapping                          pvamapping[]
  pvorgmap                            pvorgmap[]
  pvummapping                         pvummapping[]
  relatedproduct                      relatedproduct[]
  stockconversiondetails              stockconversiondetails[]
  stocktransactions                   stocktransactions[]
  stocktransfer                       stocktransfer[]
  uom_mapping                         uom_mapping[]

  @@index([createdby], map: "createdby_u_pv_idx")
  @@index([pvcurrencyid], map: "currencyid_cu_pv_idx")
  @@index([deletedby], map: "deletedby_u_pv_idx")
  @@index([modifiedby], map: "modify_u_pv_idx")
  @@index([pvdefaultimgid], map: "prodefimg_ui_pv_idx")
  @@index([proid], map: "proid_p_pv_idx")
  @@index([uoid], map: "pv_org_uoid_idx")
}

model provarianttax {
  protaxid                              BigInt       @id @default(autoincrement())
  proid                                 BigInt?
  pvid                                  BigInt?
  isexempt                              Boolean      @default(false)
  effectivedate                         DateTime?    @db.Timestamp(6)
  taxrate                               Decimal?     @db.Decimal(4, 2)
  hsncode                               Int?
  isdeleted                             Boolean?     @default(false)
  createdby                             BigInt?
  createddate                           DateTime?    @default(now()) @db.Timestamp(6)
  modifiedby                            BigInt?
  modifieddate                          DateTime?    @db.Timestamp(6)
  deletedby                             BigInt?
  deleteddate                           DateTime?    @db.Timestamp(6)
  isapproved                            Boolean?
  approvedby                            BigInt?
  approveddate                          DateTime?    @db.Timestamp(6)
  users_provarianttax_approvedbyTousers users?       @relation("provarianttax_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "ab_u_pvt")
  users_provarianttax_createdbyTousers  users?       @relation("provarianttax_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_pvt")
  users_provarianttax_deletedbyTousers  users?       @relation("provarianttax_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_pvt")
  users_provarianttax_modifiedbyTousers users?       @relation("provarianttax_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_pvt")
  product                               product?     @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_pvt")
  provariants                           provariants? @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_pvt")

  @@index([approvedby], map: "ab_u_pvt_idx")
  @@index([createdby], map: "cb_u_pvt_idx")
  @@index([deletedby], map: "db_u_pvt_idx")
  @@index([modifiedby], map: "mb_u_pvt_idx")
  @@index([proid], map: "proid_p_pvt_idx")
  @@index([pvid], map: "pvid_pv_pvt_idx")
}

model prowastage {
  wastageid                          BigInt                 @id @default(autoincrement())
  wastageno                          Int?
  seriesid                           BigInt?
  proid                              BigInt?
  pvid                               BigInt?
  wastageqty                         Decimal?               @db.Decimal(18, 4)
  wastagevalue                       Decimal?               @db.Decimal(18, 4)
  wastagedate                        DateTime?              @db.Timestamp(6)
  dom                                DateTime?              @db.Timestamp(6)
  doe                                DateTime?              @db.Timestamp(6)
  bcode                              String?                @db.VarChar(50)
  fcode                              String?                @db.VarChar(50)
  remarks                            String?
  uomid                              BigInt?
  uoid                               BigInt?
  uaid                               BigInt?
  isdeleted                          Boolean?               @default(false)
  createdby                          BigInt?
  createddate                        DateTime?              @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?              @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?              @db.Timestamp(6)
  isapproved                         Boolean?               @default(false)
  approvedby                         BigInt?
  wastagetype                        BigInt?
  proisfa                            Boolean?               @default(false)
  users_prowastage_approvedbyTousers users?                 @relation("prowastage_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_pw")
  users_prowastage_createdbyTousers  users?                 @relation("prowastage_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_pw")
  users_prowastage_deletedbyTousers  users?                 @relation("prowastage_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_pw")
  users_prowastage_modifiedbyTousers users?                 @relation("prowastage_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_pw")
  userorganization                   userorganization?      @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "orgid_uo_pw")
  product                            product?               @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_pw")
  provariants                        provariants?           @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_pw")
  series                             series?                @relation(fields: [seriesid], references: [sid], onDelete: Cascade, map: "sid_s_prw")
  useraddress                        useraddress?           @relation(fields: [uaid], references: [uaid], onDelete: Cascade, map: "uaid_ua_pw")
  unitofmeasure                      unitofmeasure?         @relation(fields: [uomid], references: [uomid], onDelete: Cascade, map: "uomid_uom_pw")
  mastervalues                       mastervalues?          @relation(fields: [wastagetype], references: [mvid], onDelete: Cascade, map: "wastagetype_mv_pw")
  prowastageattachment               prowastageattachment[]

  @@index([approvedby], map: "approvedby_u_prow_idx")
  @@index([approvedby], map: "approvedby_u_prowstg_idx")
  @@index([approvedby], map: "approvedby_u_pw_idx")
  @@index([createdby], map: "createdby_u_prow_idx")
  @@index([createdby], map: "createdby_u_prowstg_idx")
  @@index([createdby], map: "createdby_u_pw_idx")
  @@index([deletedby], map: "deletedby_u_prow_idx")
  @@index([deletedby], map: "deletedby_u_prowstg_idx")
  @@index([deletedby], map: "deletedby_u_pw_idx")
  @@index([modifiedby], map: "modifyby_u_prow_idx")
  @@index([modifiedby], map: "modifyby_u_prowstg_idx")
  @@index([modifiedby], map: "modifyby_u_pw_idx")
  @@index([uoid], map: "orgid_uo_pw_idx")
  @@index([proid], map: "proid_p_pw_idx")
  @@index([pvid], map: "pvid_pv_pw_idx")
  @@index([seriesid], map: "sid_s_prw_idx")
  @@index([uaid], map: "uaid_ua_pw_idx")
  @@index([uomid], map: "uomid_uom_pw_idx")
  @@index([wastagetype], map: "wastagetype_mv_pw_idx")
}

model prowastageattachment {
  pwaid      BigInt      @id @default(autoincrement())
  wastageid  BigInt?
  umid       BigInt?
  userimages userimages? @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_um_pwa")
  prowastage prowastage? @relation(fields: [wastageid], references: [wastageid], onDelete: Cascade, map: "wastageid_pw_pwa")

  @@index([umid], map: "umid_um_pwa_idx")
  @@index([wastageid], map: "wastageid_idx")
}

model psverification {
  psvid                                  BigInt                     @id @default(autoincrement())
  psvno                                  Int?
  seriesid                               BigInt?
  proid                                  BigInt?
  pvid                                   BigInt?
  curqty                                 Decimal?                   @db.Decimal(18, 4)
  actualqty                              Decimal?                   @db.Decimal(18, 4)
  curvalue                               Decimal?                   @db.Decimal(18, 4)
  actualvalue                            Decimal?                   @db.Decimal(18, 4)
  diffqty                                Decimal?                   @db.Decimal(18, 4)
  difvalue                               Decimal?                   @db.Decimal(18, 4)
  psvdate                                DateTime?                  @db.Timestamp(6)
  verificationtype                       BigInt?
  uomid                                  BigInt?
  uoid                                   BigInt?
  uaid                                   BigInt?
  createdby                              BigInt?
  createddate                            DateTime?                  @default(now()) @db.Timestamp(6)
  modifiedby                             BigInt?
  modifieddate                           DateTime?                  @db.Timestamp(6)
  isdeleted                              Boolean?                   @default(false)
  deletedby                              BigInt?
  deleteddate                            DateTime?                  @db.Timestamp(6)
  isapproved                             Boolean?                   @default(false)
  approvedby                             BigInt?
  dom                                    DateTime?                  @db.Timestamp(6)
  doe                                    DateTime?                  @db.Timestamp(6)
  bcode                                  String?                    @db.VarChar(50)
  fcode                                  String?                    @db.VarChar(50)
  users_psverification_approvedbyTousers users?                     @relation("psverification_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_psv")
  users_psverification_createdbyTousers  users?                     @relation("psverification_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_psv")
  users_psverification_deletedbyTousers  users?                     @relation("psverification_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_psv")
  users_psverification_modifiedbyTousers users?                     @relation("psverification_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_psv")
  userorganization                       userorganization?          @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "orgid_uo_psv")
  product                                product?                   @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_psv")
  provariants                            provariants?               @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_psv")
  series                                 series?                    @relation(fields: [seriesid], references: [sid], onDelete: Cascade, map: "sid_s_psv")
  useraddress                            useraddress?               @relation(fields: [uaid], references: [uaid], onDelete: Cascade, map: "uaid_ua_psv")
  unitofmeasure                          unitofmeasure?             @relation(fields: [uomid], references: [uomid], onDelete: Cascade, map: "uomid_uom_psv")
  mastervalues                           mastervalues?              @relation(fields: [verificationtype], references: [mvid], onDelete: Cascade, map: "vftype_mv_psv")
  psverificationattachment               psverificationattachment[]

  @@index([approvedby], map: "approvedby_u_psv_idx")
  @@index([createdby], map: "createdby_u_psv_idx")
  @@index([deletedby], map: "deletedby_u_psv_idx")
  @@index([modifiedby], map: "modifyby_u_psv_idx")
  @@index([uoid], map: "orgid_uo_psv_idx")
  @@index([proid], map: "proid_p_psv_idx")
  @@index([pvid], map: "pvid_idx")
  @@index([seriesid], map: "sid_s_psv_idx")
  @@index([uaid], map: "uaid_ua_psv_idx")
  @@index([uomid], map: "uomid_uom_psv_idx")
  @@index([verificationtype], map: "vftype_mv_psv_idx")
}

model psverificationattachment {
  psvaid         BigInt          @id @default(autoincrement())
  psvid          BigInt?
  umid           BigInt?
  psverification psverification? @relation(fields: [psvid], references: [psvid], onDelete: Cascade, map: "psvid_psv_psva")
  userimages     userimages?     @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_um_psva")

  @@index([psvid], map: "psvid_psv_psva_idx")
  @@index([umid], map: "umid_um_psva_idx")
}

model pvamapping {
  pvamid                             BigInt       @id @default(autoincrement())
  proid                              BigInt?
  pvid                               BigInt?
  attributeid                        BigInt?
  attrtextprompt                     String?      @db.VarChar(150)
  isrequired                         Boolean      @default(false)
  controltype                        Int?         @db.SmallInt
  displayorder                       Int?
  isdeleted                          Boolean?
  createdby                          BigInt?
  createddate                        DateTime?    @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?    @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?    @db.Timestamp(6)
  attributes                         attributes?  @relation(fields: [attributeid], references: [attributeid], onDelete: Cascade, map: "attrid_a_pvm")
  users_pvamapping_createdbyTousers  users?       @relation("pvamapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_pvm")
  users_pvamapping_deletedbyTousers  users?       @relation("pvamapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_pvm")
  users_pvamapping_modifiedbyTousers users?       @relation("pvamapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_pvm")
  product                            product?     @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_pvm")
  provariants                        provariants? @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pv_pv_pvm")
  pvamvalues                         pvamvalues[]

  @@index([attributeid], map: "attrid_a_pvm_idx")
  @@index([createdby], map: "createdby_u_pvm_idx")
  @@index([deletedby], map: "deletedby_u_pvm_idx")
  @@index([modifiedby], map: "modifyby_u_pvm_idx")
  @@index([proid], map: "proid_p_pvm_idx")
  @@index([pvid], map: "pv_pv_pvm_idx")
}

model pvamvalues {
  pvamvid                            BigInt           @id @default(autoincrement())
  pvamid                             BigInt?
  avid                               BigInt?
  pvamvcolor                         String?          @db.VarChar(50)
  umid                               BigInt?
  displayorder                       Int?
  isdeleted                          Boolean?
  createdby                          BigInt?
  createddate                        DateTime?        @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?        @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?        @db.Timestamp(6)
  attributevalues                    attributevalues? @relation(fields: [avid], references: [avid], onDelete: Cascade, map: "avid_av_pv")
  users_pvamvalues_createdbyTousers  users?           @relation("pvamvalues_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_pvam")
  users_pvamvalues_deletedbyTousers  users?           @relation("pvamvalues_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_pvam")
  users_pvamvalues_modifiedbyTousers users?           @relation("pvamvalues_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_pvam")
  pvamapping                         pvamapping?      @relation(fields: [pvamid], references: [pvamid], onDelete: Cascade, map: "pvamid_pvm_pv")
  userimages                         userimages?      @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_um_pv")

  @@index([avid], map: "avid_av_pmv_idx")
  @@index([createdby], map: "createdby_u_pvam_idx")
  @@index([createdby], map: "createdby_u_pvv_idx")
  @@index([deletedby], map: "deletedby_u_pvam_idx")
  @@index([deletedby], map: "deletedby_u_pvv_idx")
  @@index([modifiedby], map: "modifyby_u_pv_idx")
  @@index([modifiedby], map: "modifyby_u_pvam_idx")
  @@index([modifiedby], map: "modifyby_u_pvv_idx")
  @@index([pvamid], map: "pvamid_idx")
  @@index([umid], map: "umid_um_pv_idx")
}

model pvorgmap {
  pvomid           BigInt            @id @default(autoincrement())
  pvid             BigInt?
  uoid             BigInt?
  Isdeleted        Boolean?
  Createdby        BigInt?
  provariants      provariants?      @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pv_o_map")
  userorganization userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "pv_org_map")

  @@index([pvid], map: "pv_o_map_idx")
  @@index([uoid], map: "pv_org_map_idx")
}

model pvummapping {
  pvumid       BigInt       @id @default(autoincrement())
  proid        BigInt?
  pvid         BigInt?
  productimgid BigInt?
  isdeleted    Boolean?
  createdby    BigInt?
  product      product?     @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_pvam")
  userimages   userimages?  @relation(fields: [productimgid], references: [umid], onDelete: Cascade, map: "proimgid")
  provariants  provariants? @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid")

  @@index([proid], map: "proid_p_pvam_idx")
  @@index([productimgid], map: "proimgid_idx")
}

model relatedproduct {
  ppmid        BigInt       @id @default(autoincrement())
  pvid         BigInt?
  relatedproid BigInt?
  Isdeleted    Boolean?
  Createdby    BigInt?
  product      product?     @relation(fields: [relatedproid], references: [proid], onDelete: Cascade, map: "propromap")
  provariants  provariants? @relation(fields: [pvid], references: [pvid], onDelete: NoAction, onUpdate: NoAction, map: "proprovarmap")

  @@index([relatedproid], map: "propromap_idx")
  @@index([pvid], map: "proprovarmap_idx")
}

model rights {
  rightid                        BigInt               @id @default(autoincrement())
  rightname                      String?              @db.VarChar(100)
  modulename                     String?              @db.VarChar(100)
  isvisible                      Boolean              @default(false)
  groupname                      String?              @db.VarChar(100)
  isdeleted                      Boolean              @default(false)
  createdby                      BigInt?
  createddate                    DateTime?            @default(now()) @db.Timestamp(6)
  modifiedby                     BigInt?
  modifieddate                   DateTime?            @db.Timestamp(6)
  deletedby                      BigInt?
  deleteddate                    DateTime?            @db.Timestamp(6)
  users_rights_createdbyTousers  users?               @relation("rights_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_rights")
  users_rights_deletedbyTousers  users?               @relation("rights_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_rights")
  users_rights_modifiedbyTousers users?               @relation("rights_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_rights")
  rolesrightsmapping             rolesrightsmapping[]

  @@index([createdby], map: "createdby_u_rights_idx")
  @@index([deletedby], map: "deletedby_u_rights_idx")
  @@index([modifiedby], map: "modifyby_u_rights_idx")
}

model roles {
  roleid                        BigInt                   @id @default(autoincrement())
  type                          Int?
  isdeleted                     Boolean                  @default(false)
  createdby                     BigInt?
  createddate                   DateTime?                @default(now()) @db.Timestamp(6)
  modifiedby                    BigInt?
  modifieddate                  DateTime?                @db.Timestamp(6)
  deletedby                     BigInt?
  deleteddate                   DateTime?                @db.Timestamp(6)
  rolename                      String?                  @db.VarChar(200)
  roledesc                      String?
  parentrole                    BigInt?
  orgrolemapping                orgrolemapping[]
  users_roles_createdbyTousers  users?                   @relation("roles_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_roles")
  users_roles_deletedbyTousers  users?                   @relation("roles_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_roles")
  users_roles_modifiedbyTousers users?                   @relation("roles_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_roles")
  rolesrightsmapping            rolesrightsmapping[]
  sessions                      sessions[]
  triggertemplatemapping        triggertemplatemapping[]
  userrolemapping               userrolemapping[]

  @@index([createdby], map: "createdby_u_roles_idx")
  @@index([deletedby], map: "deletedby_u_roles_idx")
  @@index([modifiedby], map: "modifyby_u_roles_idx")
}

model rolesrightsmapping {
  rrmid                                      BigInt    @id @default(autoincrement())
  roleid                                     BigInt
  rightid                                    BigInt
  isdeleted                                  Boolean   @default(false)
  createdby                                  BigInt?
  createddate                                DateTime? @default(now()) @db.Timestamp(6)
  modifiedby                                 BigInt?
  modifieddate                               DateTime? @db.Timestamp(6)
  deletedby                                  BigInt?
  deleteddate                                DateTime? @db.Timestamp(6)
  users_rolesrightsmapping_createdbyTousers  users?    @relation("rolesrightsmapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_rrm")
  users_rolesrightsmapping_deletedbyTousers  users?    @relation("rolesrightsmapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_rrm")
  users_rolesrightsmapping_modifiedbyTousers users?    @relation("rolesrightsmapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_rrm")
  rights                                     rights    @relation(fields: [rightid], references: [rightid], onDelete: Cascade, map: "rrm_r_rightid")
  roles                                      roles     @relation(fields: [roleid], references: [roleid], onDelete: Cascade, map: "rrm_r_roleid")

  @@index([createdby], map: "createdby_u_rrm_idx")
  @@index([deletedby], map: "deletedby_u_rrm_idx")
  @@index([modifiedby], map: "modifyby_u_rrm_idx")
  @@index([rightid], map: "rrm_r_rightid_idx")
  @@index([roleid], map: "rrm_r_roleid_idx")
}

model rolestype {
  roletypeid      BigInt            @id @default(autoincrement())
  roletypename    String?           @db.VarChar(100)
  orderno         BigInt?
  roleid          BigInt?
  createdby       BigInt?
  createddate     DateTime?         @db.Timestamp(6)
  modifiedby      BigInt?
  modifieddate    DateTime?         @db.Timestamp(6)
  isdeleted       Boolean?
  deletedby       BigInt?
  deleteddate     DateTime?         @db.Timestamp(6)
  sessions        sessions[]
  userrolemapping userrolemapping[]
}

model series {
  sid                            BigInt            @id @default(autoincrement())
  sprefix                        String?           @db.VarChar(100)
  ssuffix                        String?           @db.VarChar(100)
  seriesdate                     DateTime?         @db.Timestamp(6)
  nostartingfrom                 BigInt?
  prefillwithzero                BigInt?
  uoid                           BigInt?
  startdate                      DateTime?         @db.Timestamp(6)
  enddate                        DateTime?         @db.Timestamp(6)
  vouchertype                    Int?
  renewdays                      Int?
  isdeleted                      Boolean?          @default(false)
  createdby                      BigInt?
  createddate                    DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                     BigInt?
  modifieddate                   DateTime?         @db.Timestamp(6)
  deletedby                      BigInt?
  deleteddate                    DateTime?         @db.Timestamp(6)
  bom                            bom[]
  expenses                       expenses[]
  journal                        journal[]
  materialrequest                materialrequest[]
  prowastage                     prowastage[]
  psverification                 psverification[]
  users_series_createdbyTousers  users?            @relation("series_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_series")
  users_series_deletedbyTousers  users?            @relation("series_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_series")
  users_series_modifiedbyTousers users?            @relation("series_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_series")
  userorganization               userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_series")
  stockconversion                stockconversion[]
  stocktransfer                  stocktransfer[]

  @@index([createdby], map: "cb_u_series_idx")
  @@index([deletedby], map: "db_u_series_idx")
  @@index([modifiedby], map: "mb_u_series_idx")
  @@index([uoid], map: "uoid_uo_series_idx")
}

model sessions {
  sid              BigInt            @id @default(autoincrement())
  uid              BigInt?
  ulhid            BigInt?
  username         String?           @db.VarChar(45)
  uaid             BigInt?
  token            String?
  roleid           BigInt?
  uoid             BigInt?
  validity         DateTime?         @db.Timestamp(6)
  roletypeid       BigInt?
  userorganization userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "orgid_uo_s")
  roles            roles?            @relation(fields: [roleid], references: [roleid], onDelete: Cascade, map: "rid_r_s")
  rolestype        rolestype?        @relation(fields: [roletypeid], references: [roletypeid], onDelete: NoAction, onUpdate: NoAction, map: "u_roletype")
  useraddress      useraddress?      @relation(fields: [uaid], references: [uaid], onDelete: Cascade, map: "uaid_ua_s")
  users            users?            @relation(fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_s")
  userloginhistory userloginhistory? @relation(fields: [ulhid], references: [ulhid], onDelete: Cascade, map: "ulhid_ulh_u")

  @@index([uoid], map: "orgid_uo_s_idx")
  @@index([roleid], map: "rid_r_s_idx")
  @@index([roletypeid], map: "u_roletype_idx")
  @@index([uaid], map: "uaid_ua_s_idx")
  @@index([uid], map: "uid_u_s_idx")
  @@index([ulhid], map: "ulhid_ulh_u_idx")
}

model st_history {
  sth_id      Int     @id @default(autoincrement())
  sth_colname String? @db.VarChar(150)
  sth_oldval  String? @db.VarChar(150)
  sth_newval  String? @db.VarChar(150)
  sth_revno   Int?
  sth_stid    BigInt?
}

model states {
  stateid                                BigInt           @id @default(autoincrement())
  name                                   String           @db.VarChar(255)
  country_id                             BigInt
  country_code                           String           @db.Char(2)
  fips_code                              String?          @db.VarChar(255)
  iso2                                   String?          @db.VarChar(255)
  type                                   String?          @db.VarChar(191)
  latitude                               Decimal?         @db.Decimal(10, 8)
  longitude                              Decimal?         @db.Decimal(11, 8)
  created_at                             DateTime?        @db.Timestamp(6)
  updated_at                             DateTime         @default(now()) @db.Timestamp(6)
  flag                                   Int              @default(1) @db.SmallInt
  wikiDataId                             String?          @db.VarChar(255)
  expenses_expenses_expposTostates       expenses[]       @relation("expenses_expposTostates")
  expenses_expenses_expstateTostates     expenses[]       @relation("expenses_expstateTostates")
  orders_orders_orderstateTostates       orders[]         @relation("orders_orderstateTostates")
  orders_orders_ordersupplystateTostates orders[]         @relation("orders_ordersupplystateTostates")
  org_tax_detail                         org_tax_detail[]
  countries                              countries        @relation(fields: [country_id], references: [countryid], onDelete: NoAction, onUpdate: NoAction, map: "country_region_final")
  useraddress                            useraddress[]

  @@index([country_id], map: "country_region")
}

model stockconversion {
  scid                                    BigInt                      @id @default(autoincrement())
  scno                                    Int?
  sctype                                  BigInt?
  seriesid                                BigInt?
  scdate                                  DateTime?                   @db.Timestamp(6)
  remarks                                 String?
  uoid                                    BigInt?
  uaid                                    BigInt?
  bomid                                   BigInt?
  startdate                               DateTime?                   @db.Timestamp(6)
  enddate                                 DateTime?                   @db.Timestamp(6)
  actualtime                              DateTime?                   @db.Time(6)
  isdeleted                               Boolean                     @default(false)
  createdby                               BigInt?
  createddate                             DateTime?                   @default(now()) @db.Timestamp(6)
  modifiedby                              BigInt?
  modifieddate                            DateTime?                   @db.Timestamp(6)
  deletedby                               BigInt?
  deleteddate                             DateTime?                   @db.Timestamp(6)
  isapproved                              Boolean?                    @default(false)
  approvedby                              BigInt?
  addr1                                   String?
  addr2                                   String?
  addr3                                   String?
  addr4                                   String?
  addr5                                   String?
  users_stockconversion_approvedbyTousers users?                      @relation("stockconversion_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_sc")
  bom                                     bom?                        @relation(fields: [bomid], references: [bomid], onDelete: Cascade, map: "bomid_bom_sc")
  users_stockconversion_createdbyTousers  users?                      @relation("stockconversion_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_sc")
  users_stockconversion_deletedbyTousers  users?                      @relation("stockconversion_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_sc")
  users_stockconversion_modifiedbyTousers users?                      @relation("stockconversion_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_sc")
  userorganization                        userorganization?           @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "orgid_uo_sc")
  mastervalues                            mastervalues?               @relation(fields: [sctype], references: [mvid], onDelete: Cascade, map: "sctype_mv_sc")
  series                                  series?                     @relation(fields: [seriesid], references: [sid], onDelete: Cascade, map: "sid_s_sc")
  useraddress                             useraddress?                @relation(fields: [uaid], references: [uaid], onDelete: Cascade, map: "uaid_ua_sc")
  stockconversionattachment               stockconversionattachment[]
  stockconversiondetails                  stockconversiondetails[]

  @@index([approvedby], map: "approvedby_u_sc_idx")
  @@index([bomid], map: "bomid_bom_sc_idx")
  @@index([createdby], map: "createdby_u_sc_idx")
  @@index([deletedby], map: "deletedby_u_sc_idx")
  @@index([modifiedby], map: "modifyby_u_sc_idx")
  @@index([uoid], map: "orgid_uo_sc_idx")
  @@index([sctype], map: "sctype_mv_sc_idx")
  @@index([seriesid], map: "sid_s_sc_idx")
  @@index([uaid], map: "uaid_ua_sc_idx")
}

model stockconversionattachment {
  scaid           BigInt           @id @default(autoincrement())
  scid            BigInt?
  umid            BigInt?
  stockconversion stockconversion? @relation(fields: [scid], references: [scid], onDelete: Cascade, map: "scid_sc_sca")
  userimages      userimages?      @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_um_sca")

  @@index([scid], map: "scid_sc_sca_idx")
  @@index([umid], map: "umid_um_sca_idx")
}

model stockconversiondetails {
  scdid                                          BigInt           @id @default(autoincrement())
  scid                                           BigInt?
  proid                                          BigInt?
  pvid                                           BigInt?
  stockqty                                       Decimal?         @db.Decimal(18, 4)
  uomid                                          BigInt?
  stockvalue                                     Decimal?         @db.Decimal(18, 4)
  scdtype                                        Boolean          @default(false)
  notes                                          String?
  bomdid                                         BigInt?
  bomdqty                                        Decimal?         @db.Decimal(10, 0)
  scddate                                        DateTime?        @db.Timestamp(6)
  dom                                            DateTime?        @db.Timestamp(6)
  doe                                            DateTime?        @db.Timestamp(6)
  bcode                                          String?          @db.VarChar(50)
  fcode                                          String?          @db.VarChar(50)
  isdeleted                                      Boolean?         @default(false)
  createdby                                      BigInt?
  createddate                                    DateTime?        @default(now()) @db.Timestamp(6)
  modifiedby                                     BigInt?
  modifieddate                                   DateTime?        @db.Timestamp(6)
  deletedby                                      BigInt?
  deleteddate                                    DateTime?        @db.Timestamp(6)
  isapproved                                     Boolean?         @default(false)
  approvedby                                     BigInt?
  users_stockconversiondetails_approvedbyTousers users?           @relation("stockconversiondetails_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_scd")
  bomdetails                                     bomdetails?      @relation(fields: [bomdid], references: [bomdid], onDelete: Cascade, map: "bomdid_bd_scd")
  users_stockconversiondetails_createdbyTousers  users?           @relation("stockconversiondetails_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_scd")
  users_stockconversiondetails_deletedbyTousers  users?           @relation("stockconversiondetails_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_scd")
  users_stockconversiondetails_modifiedbyTousers users?           @relation("stockconversiondetails_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_scd")
  product                                        product?         @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_scd")
  provariants                                    provariants?     @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_scd")
  stockconversion                                stockconversion? @relation(fields: [scid], references: [scid], onDelete: Cascade, map: "scid_sc_scd")
  unitofmeasure                                  unitofmeasure?   @relation(fields: [uomid], references: [uomid], onDelete: Cascade, map: "uomid_uom_scd")

  @@index([approvedby], map: "approvedby_u_scd_idx")
  @@index([bomdid], map: "bomdid_bd_scd_idx")
  @@index([createdby], map: "createdby_u_scd_idx")
  @@index([deletedby], map: "deletedby_u_scd_idx")
  @@index([modifiedby], map: "modifyby_u_scd_idx")
  @@index([proid], map: "proid_p_scd_idx")
  @@index([pvid], map: "pvid_pv_scd_idx")
  @@index([scid], map: "scid_sc_scd_idx")
  @@index([uomid], map: "uomid_uom_scd_idx")
}

model stocktransactions {
  stid                                      BigInt            @id @default(autoincrement())
  proid                                     BigInt?
  pvid                                      BigInt?
  uaid                                      BigInt?
  uoid                                      BigInt?
  dom                                       DateTime?         @db.Timestamp(6)
  doe                                       DateTime?         @db.Timestamp(6)
  bcode                                     String?           @db.VarChar(50)
  fcode                                     String?           @db.VarChar(50)
  refid                                     BigInt?
  reftable                                  Int?
  pqty                                      Decimal?          @db.Decimal(19, 4)
  pvalue                                    Decimal?          @db.Decimal(19, 4)
  sqty                                      Decimal?          @db.Decimal(19, 4)
  bqty                                      Decimal?          @default(dbgenerated("(COALESCE(pqty, (0)::numeric) - COALESCE(sqty, (0)::numeric))")) @db.Decimal(19, 4)
  status                                    Int?
  isnull                                    Boolean           @default(false)
  transactiondate                           DateTime?         @db.Timestamp(6)
  isdeleted                                 Boolean?
  createdby                                 BigInt?
  createddate                               DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                                BigInt?
  modifieddate                              DateTime?         @db.Timestamp(6)
  deletedby                                 BigInt?
  deleteddate                               DateTime?         @db.Timestamp(6)
  isapproved                                Boolean?
  approvedby                                BigInt?
  approveddate                              DateTime?         @db.Timestamp(6)
  users_stocktransactions_approvedbyTousers users?            @relation("stocktransactions_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "ab_u_stc")
  users_stocktransactions_createdbyTousers  users?            @relation("stocktransactions_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_stc")
  users_stocktransactions_deletedbyTousers  users?            @relation("stocktransactions_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_stc")
  users_stocktransactions_modifiedbyTousers users?            @relation("stocktransactions_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_stc")
  product                                   product?          @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_pro_stc")
  provariants                               provariants?      @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_stc")
  useraddress                               useraddress?      @relation(fields: [uaid], references: [uaid], onDelete: Cascade, map: "uaid_ua_stc")
  userorganization                          userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_stc")
  stsmapping                                stsmapping[]

  @@index([approvedby], map: "ab_u_stc_idx")
  @@index([createdby], map: "cb_u_stc_idx")
  @@index([deletedby], map: "db_u_stc_idx")
  @@index([modifiedby], map: "mb_u_stc_idx")
  @@index([proid], map: "proid_pro_stc_idx")
  @@index([pvid], map: "pvid_pv_stc_idx")
  @@index([uaid], map: "uaid_ua_stc_idx")
  @@index([uoid], map: "uoid_uo_stc_idx")
}

model stocktransfer {
  sktid                                                     BigInt                    @id @default(autoincrement())
  transferno                                                Int?
  seriesid                                                  BigInt?
  proid                                                     BigInt?
  pvid                                                      BigInt?
  uaidfrom                                                  BigInt?
  usidto                                                    BigInt?
  orderedqty                                                Decimal?                  @db.Decimal(19, 4)
  transferdate                                              DateTime?                 @db.Timestamp(6)
  transferedqty                                             Decimal?                  @db.Decimal(19, 4)
  transfervalue                                             Decimal?                  @db.Decimal(19, 4)
  transferuomid                                             BigInt?
  receivedqty                                               Decimal?                  @db.Decimal(19, 4)
  varianceqty                                               Decimal?                  @default(dbgenerated("(COALESCE(transferedqty, (0)::numeric) - COALESCE(receivedqty, (0)::numeric))")) @db.Decimal(19, 4)
  uoidfrom                                                  BigInt
  uoidto                                                    BigInt
  dom                                                       DateTime?                 @db.Timestamp(6)
  doe                                                       DateTime?                 @db.Timestamp(6)
  bcode                                                     String?                   @db.VarChar(50)
  fcode                                                     String?                   @db.VarChar(50)
  remarks                                                   String?
  ststatus                                                  BigInt?
  isapproved                                                Boolean
  approvedby                                                BigInt?
  isdeleted                                                 Boolean?                  @default(false)
  createdby                                                 BigInt?
  createddate                                               DateTime?                 @default(now()) @db.Timestamp(6)
  modifiedby                                                BigInt?
  modifieddate                                              DateTime?                 @db.Timestamp(6)
  deletedby                                                 BigInt?
  deleteddate                                               DateTime?                 @db.Timestamp(6)
  users_stocktransfer_approvedbyTousers                     users?                    @relation("stocktransfer_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "approvedby_u_st")
  users_stocktransfer_createdbyTousers                      users?                    @relation("stocktransfer_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_st")
  users_stocktransfer_deletedbyTousers                      users?                    @relation("stocktransfer_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deleteby_u_st")
  users_stocktransfer_modifiedbyTousers                     users?                    @relation("stocktransfer_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifiedby_u_st")
  product                                                   product?                  @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "proid_p_st")
  provariants                                               provariants?              @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "pvid_pv_st")
  series                                                    series?                   @relation(fields: [seriesid], references: [sid], onDelete: Cascade, map: "sid_s_st")
  mastervalues                                              mastervalues?             @relation(fields: [ststatus], references: [mvid], onDelete: Cascade, map: "ststatus_mv_st")
  useraddress_stocktransfer_uaidfromTouseraddress           useraddress?              @relation("stocktransfer_uaidfromTouseraddress", fields: [uaidfrom], references: [uaid], onDelete: Cascade, map: "uaidfrom_ua_st")
  useraddress_stocktransfer_usidtoTouseraddress             useraddress?              @relation("stocktransfer_usidtoTouseraddress", fields: [usidto], references: [uaid], onDelete: Cascade, map: "uaidto_ua_st")
  userorganization_stocktransfer_uoidfromTouserorganization userorganization          @relation("stocktransfer_uoidfromTouserorganization", fields: [uoidfrom], references: [uoid], onDelete: Cascade, map: "uoid_uo_st")
  userorganization_stocktransfer_uoidtoTouserorganization   userorganization          @relation("stocktransfer_uoidtoTouserorganization", fields: [uoidto], references: [uoid], onDelete: Cascade, map: "uoidto_uo_st")
  unitofmeasure                                             unitofmeasure?            @relation(fields: [transferuomid], references: [uomid], onDelete: Cascade, map: "uomid_uom_st")
  stocktransferattachment                                   stocktransferattachment[]

  @@index([approvedby], map: "approvedby_u_st_idx")
  @@index([createdby], map: "createdby_u_st_idx")
  @@index([deletedby], map: "deleteby_u_st_idx")
  @@index([modifiedby], map: "modifiedby_u_st_idx")
  @@index([proid], map: "proid_p_st_idx")
  @@index([seriesid], map: "sid_s_st_idx")
  @@index([ststatus], map: "ststatus_mv_st_idx")
  @@index([uaidfrom], map: "uaid_ua_st_idx")
  @@index([usidto], map: "uaidto_ua_st_idx")
  @@index([uoidfrom], map: "uoid_uo_st_idx")
  @@index([uoidto], map: "uoidto_uo_st_idx")
  @@index([transferuomid], map: "uomid_uom_st_idx")
}

model stocktransferattachment {
  staid         BigInt         @id @default(autoincrement())
  sktid         BigInt?
  umid          BigInt?
  stocktransfer stocktransfer? @relation(fields: [sktid], references: [sktid], onDelete: Cascade, map: "sktid_st_sta")
  userimages    userimages?    @relation(fields: [umid], references: [umid], onDelete: Cascade, map: "umid_um_sta")

  @@index([sktid], map: "sktid_st_sta_idx")
  @@index([umid], map: "umid_um_sta_idx")
}

model stsmapping {
  stsmid            BigInt             @id @default(autoincrement())
  stid              BigInt?
  vchid             BigInt?
  vchtype           BigInt?
  sqty              Decimal?           @db.Decimal(19, 4)
  transactiondate   DateTime?          @db.Timestamp(6)
  isdeleted         Boolean?
  createddate       DateTime?          @default(now()) @db.Timestamp(6)
  stocktransactions stocktransactions? @relation(fields: [stid], references: [stid], onDelete: Cascade, map: "stid_st_stsm")

  @@index([stid], map: "stid_st_stsm_idx")
}

model table_bookings {
  booking_id                                                             Int                 @id(map: "bookings_pkey") @default(autoincrement())
  booking_time                                                           DateTime            @db.Timestamp(6)
  table_id                                                               Int?
  no_of_guests                                                           Int
  waiter_id                                                              Int?
  merge_table_id                                                         Int[]
  createddate                                                            DateTime?           @default(now()) @db.Timestamp(6)
  modifeddate                                                            DateTime?           @db.Timestamp(6)
  created_by                                                             BigInt?
  is_reservation                                                         Boolean?            @default(false)
  is_deleted                                                             Boolean?            @default(false)
  uid                                                                    BigInt?
  modifiedby                                                             BigInt?
  qid                                                                    Int?
  orders                                                                 orders[]
  table_information_table_bookings_table_idTotable_information           table_information?  @relation("table_bookings_table_idTotable_information", fields: [table_id], references: [table_id], onDelete: Restrict, map: "fk_table_bookings_table_id")
  users                                                                  users?              @relation(fields: [uid], references: [uid], map: "fk_table_bookings_uid")
  table_information_table_information_current_booking_idTotable_bookings table_information[] @relation("table_information_current_booking_idTotable_bookings")
}

model table_information {
  table_id                                                            Int              @id @default(autoincrement())
  floor_id                                                            Int
  table_name                                                          String           @db.VarChar(50)
  capacity                                                            Int
  status                                                              BigInt?          @default(0)
  current_reservation_id                                              Int?
  current_booking_id                                                  Int?
  created_at                                                          DateTime?        @default(now()) @db.Timestamp(6)
  updated_at                                                          DateTime?        @default(now()) @db.Timestamp(6)
  is_deleted                                                          Boolean?         @default(false)
  deleted_by                                                          Int?
  orders                                                              orders[]
  table_bookings_table_bookings_table_idTotable_information           table_bookings[] @relation("table_bookings_table_idTotable_information")
  table_bookings_table_information_current_booking_idTotable_bookings table_bookings?  @relation("table_information_current_booking_idTotable_bookings", fields: [current_booking_id], references: [booking_id], map: "fk_table_information_current_booking_id")
  floor                                                               floor            @relation(fields: [floor_id], references: [floor_id], map: "fk_table_information_floor_id")
  mastervalues                                                        mastervalues?    @relation(fields: [status], references: [mvid], onDelete: Restrict, map: "fk_table_information_status_mvid")
}

model table_queue {
  qid              Int              @id @default(autoincrement())
  uoid             BigInt
  arrival_time     DateTime         @db.Timestamp(6)
  guest_name       String           @db.VarChar(255)
  guest_number     String           @db.VarChar(15)
  guest_count      Int
  note             String?
  status           BigInt           @default(0)
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  updated_at       DateTime?        @default(now()) @db.Timestamp(6)
  userorganization userorganization @relation(fields: [uoid], references: [uoid], onDelete: Cascade)
}

model triggers {
  triggerid              BigInt                   @id @default(autoincrement())
  triggername            String?
  triggerplace           String?
  triggerdescription     String?
  triggertemplatemapping triggertemplatemapping[]
}

model triggertemplatemapping {
  ttmid                                          BigInt              @id @default(autoincrement())
  triggerid                                      BigInt?
  triggertemplateid                              BigInt?
  startdate                                      DateTime?           @db.Timestamp(6)
  enddate                                        DateTime?           @db.Timestamp(6)
  uoid                                           BigInt?
  sendto                                         BigInt?
  shareonwhatsapp                                Boolean?            @default(false)
  shareonemail                                   Boolean?            @default(false)
  shareonsms                                     Boolean?            @default(false)
  shareonother                                   Boolean?            @default(false)
  shareonsocial                                  Boolean?            @default(false)
  isenabled                                      Boolean?            @default(false)
  applink                                        String?
  weblink                                        String?
  isdeleted                                      Boolean?            @default(false)
  createdby                                      BigInt?
  createddate                                    DateTime?           @default(now()) @db.Timestamp(6)
  modifiedby                                     BigInt?
  modifieddate                                   DateTime?           @db.Timestamp(6)
  deletedby                                      BigInt?
  deleteddate                                    DateTime?           @db.Timestamp(6)
  isapproved                                     Boolean?            @default(false)
  approvedby                                     BigInt?
  users_triggertemplatemapping_approvedbyTousers users?              @relation("triggertemplatemapping_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "ab_u_ttm")
  users_triggertemplatemapping_createdbyTousers  users?              @relation("triggertemplatemapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_ttm")
  users_triggertemplatemapping_deletedbyTousers  users?              @relation("triggertemplatemapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_ttm")
  users_triggertemplatemapping_modifiedbyTousers users?              @relation("triggertemplatemapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_ttm")
  roles                                          roles?              @relation(fields: [sendto], references: [roleid], onDelete: Cascade, map: "sendto_r_ttm")
  triggers                                       triggers?           @relation(fields: [triggerid], references: [triggerid], onDelete: Cascade, map: "triggerid_tr_ttm")
  triggertemplates                               triggertemplates?   @relation(fields: [triggertemplateid], references: [triggertemplateid], onDelete: Cascade, map: "ttid_tt_ttm")
  userorganization                               userorganization?   @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_ttm")
  usernotifications                              usernotifications[]

  @@index([approvedby], map: "ab_u_ttm_idx")
  @@index([createdby], map: "cb_u_ttm_idx")
  @@index([deletedby], map: "db_u_ttm_idx")
  @@index([modifiedby], map: "mb_u_ttm_idx")
  @@index([sendto], map: "sendto_r_ttm_idx")
  @@index([triggerid], map: "triggerid_tr_ttm_idx")
  @@index([triggertemplateid], map: "ttid_tt_ttm_idx")
  @@index([uoid], map: "uoid_uo_ttm_idx")
}

model triggertemplates {
  triggertemplateid                        BigInt                     @id @default(autoincrement())
  templatename                             String?
  templatesmscontent                       String?
  templatewhatsappcontent                  String?
  templatesocialcontent                    String?
  templatedefaultImage                     String?
  templateemailcontent                     String?
  templatesharecontent                     String?
  uoid                                     BigInt?
  isdeleted                                Boolean?                   @default(false)
  createdby                                BigInt?
  createddate                              DateTime?                  @default(now()) @db.Timestamp(6)
  modifiedby                               BigInt?
  modifieddate                             DateTime?                  @db.Timestamp(6)
  deletedby                                BigInt?
  deleteddate                              DateTime?                  @db.Timestamp(6)
  isapproved                               Boolean?                   @default(false)
  approvedby                               BigInt?
  triggertemplatemapping                   triggertemplatemapping[]
  users_triggertemplates_approvedbyTousers users?                     @relation("triggertemplates_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "ab_u_tt")
  users_triggertemplates_createdbyTousers  users?                     @relation("triggertemplates_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_tt")
  users_triggertemplates_deletedbyTousers  users?                     @relation("triggertemplates_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_tt")
  users_triggertemplates_modifiedbyTousers users?                     @relation("triggertemplates_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_tt")
  userorganization                         userorganization?          @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_tt")
  triggertemplatevariables                 triggertemplatevariables[]

  @@index([approvedby], map: "ab_u_tt_idx")
  @@index([createdby], map: "cb_u_tt_idx")
  @@index([deletedby], map: "db_u_tt_idx")
  @@index([modifiedby], map: "mb_u_tt_idx")
  @@index([uoid], map: "uoid_uo_tt_idx")
}

model triggertemplatevariables {
  ttvid                                            BigInt            @id @default(autoincrement())
  triggertemplateid                                BigInt?
  variablename                                     String?           @db.VarChar(100)
  variablelink                                     String?
  isdeleted                                        Boolean?          @default(false)
  createdby                                        BigInt?
  createddate                                      DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                                       BigInt?
  modifieddate                                     DateTime?         @db.Timestamp(6)
  deletedby                                        BigInt?
  deleteddate                                      DateTime?         @db.Timestamp(6)
  isapproved                                       Boolean?          @default(false)
  approvedby                                       BigInt?
  users_triggertemplatevariables_approvedbyTousers users?            @relation("triggertemplatevariables_approvedbyTousers", fields: [approvedby], references: [uid], onDelete: Cascade, map: "ab_u_ttv")
  users_triggertemplatevariables_createdbyTousers  users?            @relation("triggertemplatevariables_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_ttv")
  users_triggertemplatevariables_deletedbyTousers  users?            @relation("triggertemplatevariables_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_ttv")
  users_triggertemplatevariables_modifiedbyTousers users?            @relation("triggertemplatevariables_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_ttv")
  triggertemplates                                 triggertemplates? @relation(fields: [triggertemplateid], references: [triggertemplateid], onDelete: Cascade, map: "ttid_tt_ttv")

  @@index([approvedby], map: "ab_u_ttv_idx")
  @@index([createdby], map: "cb_u_ttv_idx")
  @@index([deletedby], map: "db_u_ttv_idx")
  @@index([modifiedby], map: "mb_u_ttv_idx")
  @@index([triggertemplateid], map: "ttid_tt_ttv_idx")
}

model uahistory {
  uahid                             BigInt       @id @default(autoincrement())
  uaid                              BigInt?
  isallowed                         Boolean?
  uahdate                           DateTime?    @db.Timestamp(6)
  isdeleted                         Boolean?     @default(false)
  createdby                         BigInt?
  createddate                       DateTime?    @default(now()) @db.Timestamp(6)
  modifiedby                        BigInt?
  modifieddate                      DateTime?    @db.Timestamp(6)
  deletedby                         BigInt?
  deleteddate                       DateTime?    @db.Timestamp(6)
  users_uahistory_createdbyTousers  users?       @relation("uahistory_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "create_u_uah")
  users_uahistory_deletedbyTousers  users?       @relation("uahistory_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "delete_u_uah")
  users_uahistory_modifiedbyTousers users?       @relation("uahistory_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modified_u_uah")
  useraddress                       useraddress? @relation(fields: [uaid], references: [uaid], onDelete: Cascade, map: "uaid_ua_uah")

  @@index([createdby], map: "create_u_uah_idx")
  @@index([deletedby], map: "delete_u_uah_idx")
  @@index([modifiedby], map: "modified_u_uah_idx")
  @@index([uaid], map: "uaid_ua_uah_idx")
}

model unitofmeasure {
  uomid                                                                BigInt                   @id @default(autoincrement())
  uomname                                                              String?                  @db.VarChar(250)
  uomsymbole                                                           String?                  @db.VarChar(50)
  catid                                                                BigInt?
  uid                                                                  BigInt?
  isdeleted                                                            Boolean                  @default(false)
  createdby                                                            BigInt?
  createddate                                                          DateTime?                @default(now()) @db.Timestamp(6)
  modifiedby                                                           BigInt?
  modifieddate                                                         DateTime?                @db.Timestamp(6)
  deletedby                                                            BigInt?
  deleteddate                                                          DateTime?                @db.Timestamp(6)
  bomdetails                                                           bomdetails[]
  materialrequestitems                                                 materialrequestitems[]
  orderitems_orderitems_itemselecteduomTounitofmeasure                 orderitems[]             @relation("orderitems_itemselecteduomTounitofmeasure")
  orderitems                                                           orderitems[]
  product                                                              product[]
  provariantlocations_provariantlocations_min_stock_uomTounitofmeasure provariantlocations[]    @relation("provariantlocations_min_stock_uomTounitofmeasure")
  provariantlocations_provariantlocations_par_stock_uomTounitofmeasure provariantlocations[]    @relation("provariantlocations_par_stock_uomTounitofmeasure")
  prowastage                                                           prowastage[]
  psverification                                                       psverification[]
  stockconversiondetails                                               stockconversiondetails[]
  stocktransfer                                                        stocktransfer[]
  categories                                                           categories?              @relation(fields: [catid], references: [catid], onDelete: Cascade, map: "catid_c_uom")
  users_unitofmeasure_createdbyTousers                                 users?                   @relation("unitofmeasure_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_uom")
  users_unitofmeasure_deletedbyTousers                                 users?                   @relation("unitofmeasure_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_uom")
  users_unitofmeasure_modifiedbyTousers                                users?                   @relation("unitofmeasure_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_uom")
  users_unitofmeasure_uidTousers                                       users?                   @relation("unitofmeasure_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_uom")
  uom_mapping                                                          uom_mapping[]
  uomconversions_uomconversions_uomfromTounitofmeasure                 uomconversions[]         @relation("uomconversions_uomfromTounitofmeasure")
  uomconversions_uomconversions_uomtoTounitofmeasure                   uomconversions[]         @relation("uomconversions_uomtoTounitofmeasure")

  @@index([catid], map: "catid_c_uom_idx")
  @@index([createdby], map: "createdby_u_uom_idx")
  @@index([deletedby], map: "deletedby_u_uom_idx")
  @@index([modifiedby], map: "modifyby_u_uom_idx")
  @@index([uid], map: "uid_u_uom_idx")
}

model uom_mapping {
  uommid                              BigInt         @id @default(autoincrement())
  proid                               BigInt?
  pvid                                BigInt?
  uomid                               BigInt?
  is_default                          Boolean?       @default(false)
  uom_type                            BigInt?
  isdeleted                           Boolean?       @default(false)
  modifiedby                          BigInt?
  modifieddate                        DateTime?      @db.Timestamp(6)
  createdby                           BigInt?
  users_uom_mapping_createdbyTousers  users?         @relation("uom_mapping_createdbyTousers", fields: [createdby], references: [uid], onUpdate: NoAction, map: "uom_mapping_creator_fk")
  users_uom_mapping_modifiedbyTousers users?         @relation("uom_mapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onUpdate: NoAction, map: "uom_mapping_modifier_fk")
  product                             product?       @relation(fields: [proid], references: [proid], onDelete: Cascade, map: "uom_mapping_product_fk")
  mastervalues                        mastervalues?  @relation(fields: [uom_type], references: [mvid], onUpdate: NoAction, map: "uom_mapping_type_fk")
  unitofmeasure                       unitofmeasure? @relation(fields: [uomid], references: [uomid], onUpdate: NoAction, map: "uom_mapping_uom_fk")
  provariants                         provariants?   @relation(fields: [pvid], references: [pvid], onDelete: Cascade, map: "uom_mapping_variant_fk")
}

model uomconversions {
  uomcid                                              BigInt         @id @default(autoincrement())
  catid                                               BigInt?
  uomfrom                                             BigInt?
  uomto                                               BigInt?
  uomvalue                                            Decimal?       @db.Decimal(19, 4)
  uid                                                 BigInt?
  isdeleted                                           Boolean?       @default(false)
  createdby                                           BigInt?
  createddate                                         DateTime?      @default(now()) @db.Timestamp(6)
  modifiedby                                          BigInt?
  modifieddate                                        DateTime?      @db.Timestamp(6)
  deletedby                                           BigInt?
  deleteddate                                         DateTime?      @db.Timestamp(6)
  categories                                          categories?    @relation(fields: [catid], references: [catid], onDelete: Cascade, map: "catid_c_uc")
  users_uomconversions_createdbyTousers               users?         @relation("uomconversions_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_uc")
  users_uomconversions_deletedbyTousers               users?         @relation("uomconversions_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_uc")
  users_uomconversions_modifiedbyTousers              users?         @relation("uomconversions_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_uc")
  users_uomconversions_uidTousers                     users?         @relation("uomconversions_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_uc")
  unitofmeasure_uomconversions_uomfromTounitofmeasure unitofmeasure? @relation("uomconversions_uomfromTounitofmeasure", fields: [uomfrom], references: [uomid], onDelete: Cascade, map: "uomfrom_um_uc")
  unitofmeasure_uomconversions_uomtoTounitofmeasure   unitofmeasure? @relation("uomconversions_uomtoTounitofmeasure", fields: [uomto], references: [uomid], onDelete: Cascade, map: "uomto_um_uc")

  @@index([catid], map: "catid_c_uc_idx")
  @@index([createdby], map: "createdby_u_uc_idx")
  @@index([deletedby], map: "deletedby_u_uc_idx")
  @@index([modifiedby], map: "modifyby_u_uc_idx")
  @@index([uid], map: "uid_u_uc_idx")
  @@index([uomfrom], map: "uomfrom_um_uc_idx")
  @@index([uomto], map: "uomto_um_uc_idx")
}

model useractivityhistory {
  uahid                                       BigInt    @id @default(autoincrement())
  subject                                     String?
  action                                      String?
  status                                      String?   @db.VarChar(50)
  uid                                         BigInt
  logtimestamp                                DateTime  @db.Timestamp(6)
  logIP                                       String    @db.VarChar(50)
  isdeleted                                   Boolean   @default(false)
  createdby                                   BigInt?
  createddate                                 DateTime? @db.Timestamp(6)
  modifiedby                                  BigInt?
  modifieddate                                DateTime? @db.Timestamp(6)
  deletedby                                   BigInt?
  deleteddate                                 DateTime? @db.Timestamp(6)
  iserror                                     Boolean?
  users_useractivityhistory_createdbyTousers  users?    @relation("useractivityhistory_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_uah")
  users_useractivityhistory_deletedbyTousers  users?    @relation("useractivityhistory_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_uah")
  users_useractivityhistory_modifiedbyTousers users?    @relation("useractivityhistory_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_uah")
  users_useractivityhistory_uidTousers        users     @relation("useractivityhistory_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uah_u_uid")
}

model useradditionalcolumns {
  uadcid                                        BigInt    @id @default(autoincrement())
  uadcname                                      String?   @db.VarChar(100)
  uadclabel                                     String?   @db.VarChar(100)
  uadctablename                                 String?   @db.VarChar(100)
  uadctype                                      Int?
  uadcforeignkey                                String?   @db.VarChar(100)
  uid                                           BigInt?
  isdeleted                                     Boolean   @default(false)
  createdby                                     BigInt?
  createddate                                   DateTime? @default(now()) @db.Timestamp(6)
  modifiedby                                    BigInt?
  modifieddate                                  DateTime? @db.Timestamp(6)
  deletedby                                     BigInt?
  deleteddate                                   DateTime? @db.Timestamp(6)
  users_useradditionalcolumns_createdbyTousers  users?    @relation("useradditionalcolumns_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_uac")
  users_useradditionalcolumns_deletedbyTousers  users?    @relation("useradditionalcolumns_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_uac")
  users_useradditionalcolumns_modifiedbyTousers users?    @relation("useradditionalcolumns_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_uac")
  users_useradditionalcolumns_uidTousers        users?    @relation("useradditionalcolumns_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uac_u_uid")

  @@index([createdby], map: "createdby_u_uac_idx")
  @@index([deletedby], map: "deletedby_u_uac_idx")
  @@index([modifiedby], map: "modifyby_u_uac_idx")
  @@index([uid], map: "uac_u_uid_idx")
}

model useraddress {
  uaid                                              BigInt                  @id @default(autoincrement())
  address1                                          String?                 @db.VarChar(500)
  address2                                          String?                 @db.VarChar(500)
  city                                              String?                 @db.VarChar(255)
  state                                             BigInt?
  country                                           BigInt?
  pincode                                           String?                 @db.VarChar(50)
  uid                                               BigInt?
  isdeleted                                         Boolean?                @default(false)
  createdby                                         BigInt?
  createddate                                       DateTime?               @default(now()) @db.Timestamp(6)
  modifiedby                                        BigInt?
  modifieddate                                      DateTime?               @db.Timestamp(6)
  deletedby                                         BigInt?
  deleteddate                                       DateTime?               @db.Timestamp(6)
  addridentifier                                    String?                 @db.VarChar(45)
  maplocation                                       String?
  latitude                                          Decimal?                @db.Decimal(9, 6)
  longitude                                         Decimal?                @db.Decimal(9, 6)
  isallowed                                         Boolean?                @default(false)
  qrcode                                            String?
  userfulladdress                                   String?                 @default("concat(coalesce(\"address1\",_utf8mb4''),_utf8mb4',',coalesce(\"address2\",_utf8mb4''),_utf8mb4',',coalesce(\"city\",_utf8mb4''),_utf8mb4',',convert(coalesce(\"pincode\",_utf8mb3'') using utf8mb4))") @db.VarChar(4000)
  bomschedule                                       bomschedule[]
  expenses_expenses_expaddridTouseraddress          expenses[]              @relation("expenses_expaddridTouseraddress")
  expenses_expenses_expvendoraddressTouseraddress   expenses[]              @relation("expenses_expvendoraddressTouseraddress")
  orders_orders_orderdeliverfromTouseraddress       orders[]                @relation("orders_orderdeliverfromTouseraddress")
  orders_orders_orderdelivertoTouseraddress         orders[]                @relation("orders_orderdelivertoTouseraddress")
  productcurrentstock                               productcurrentstock[]
  prorate                                           prorate[]
  provariantlocations                               provariantlocations[]
  prowastage                                        prowastage[]
  psverification                                    psverification[]
  sessions                                          sessions[]
  stockconversion                                   stockconversion[]
  stocktransactions                                 stocktransactions[]
  stocktransfer_stocktransfer_uaidfromTouseraddress stocktransfer[]         @relation("stocktransfer_uaidfromTouseraddress")
  stocktransfer_stocktransfer_usidtoTouseraddress   stocktransfer[]         @relation("stocktransfer_usidtoTouseraddress")
  uahistory                                         uahistory[]
  users_useraddress_createdbyTousers                users?                  @relation("useraddress_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_ua")
  users_useraddress_deletedbyTousers                users?                  @relation("useraddress_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_ua")
  users_useraddress_modifiedbyTousers               users?                  @relation("useraddress_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_ua")
  countries                                         countries?              @relation(fields: [country], references: [countryid], onDelete: Cascade, map: "ua_c_countryid")
  states                                            states?                 @relation(fields: [state], references: [stateid], onDelete: Cascade, map: "ua_s_stateid")
  users_useraddress_uidTousers                      users?                  @relation("useraddress_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "ua_u_uid")
  userorgaddressmapping                             userorgaddressmapping[]

  @@index([createdby], map: "createdby_u_ua_idx")
  @@index([deletedby], map: "deletedby_u_ua_idx")
  @@index([modifiedby], map: "modifyby_u_ua_idx")
  @@index([country], map: "ua_c_countryid_idx")
  @@index([state], map: "ua_s_stateid_idx")
  @@index([uid], map: "ua_u_uid_idx")
}

model userattrmapping {
  uamid                                   BigInt           @id @default(autoincrement())
  uid                                     BigInt?
  attributeid                             BigInt?
  avid                                    BigInt?
  isdeleted                               Boolean?         @default(false)
  createdby                               BigInt?
  createddate                             DateTime?        @default(now()) @db.Timestamp(6)
  modifiedby                              BigInt?
  modifieddate                            DateTime?        @db.Timestamp(6)
  deletedby                               BigInt?
  deleteddate                             DateTime?        @db.Timestamp(6)
  attributes                              attributes?      @relation(fields: [attributeid], references: [attributeid], onDelete: Cascade, map: "attributeid_attri_userattr")
  attributevalues                         attributevalues? @relation(fields: [avid], references: [avid], onDelete: Cascade, map: "avid_attrivalue_userattr")
  users_userattrmapping_createdbyTousers  users?           @relation("userattrmapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_userattr")
  users_userattrmapping_deletedbyTousers  users?           @relation("userattrmapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_useratte")
  users_userattrmapping_modifiedbyTousers users?           @relation("userattrmapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifiedby_u_userattr")
  users_userattrmapping_uidTousers        users?           @relation("userattrmapping_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_userattr")

  @@index([attributeid], map: "attributeid_attri_userattr_idx")
  @@index([avid], map: "avid_attrivalue_userattr_idx")
  @@index([createdby], map: "createdby_u_userattr_idx")
  @@index([deletedby], map: "deletedby_u_useratte_idx")
  @@index([modifiedby], map: "modifiedby_u_userattr_idx")
  @@index([uid], map: "uid_u_userattr_idx")
}

model usercommisionmapping {
  ucmid            BigInt            @id @default(autoincrement())
  uid              BigInt?
  uoid             BigInt?
  percentage       Decimal?          @db.Decimal(4, 4)
  value            Decimal?          @db.Decimal(19, 4)
  users            users?            @relation(fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_ucm")
  userorganization userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_ucm")

  @@index([uid], map: "uid_u_ucm_idx")
  @@index([uoid], map: "uoid_uo_ucm_idx")
}

model userimages {
  umid                               BigInt                      @id @default(autoincrement())
  umname                             String?                     @db.VarChar(255)
  umalttext                          String?
  umtype                             Int?                        @db.SmallInt
  umiswatermark                      Boolean?
  uid                                BigInt?
  umurl                              String?
  umsizes                            String?                     @db.VarChar(250)
  umbytes                            Int?
  umextenstion                       String?                     @db.VarChar(10)
  isdeleted                          Boolean                     @default(false)
  createdby                          BigInt?
  createddate                        DateTime?                   @default(now()) @db.Timestamp(6)
  modifiedby                         BigInt?
  modifieddate                       DateTime?                   @db.Timestamp(6)
  deletedby                          BigInt?
  deleteddate                        DateTime?                   @db.Timestamp(6)
  bomattachment                      bomattachment[]
  categories                         categories[]
  expenseattachment                  expenseattachment[]
  invoiceattachment                  invoiceattachment[]
  journalattachment                  journalattachment[]
  materialattachment                 materialattachment[]
  orderattachment                    orderattachment[]
  product                            product[]
  provariants                        provariants[]
  prowastageattachment               prowastageattachment[]
  psverificationattachment           psverificationattachment[]
  pvamvalues                         pvamvalues[]
  pvummapping                        pvummapping[]
  stockconversionattachment          stockconversionattachment[]
  stocktransferattachment            stocktransferattachment[]
  users_userimages_createdbyTousers  users?                      @relation("userimages_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_ui")
  users_userimages_deletedbyTousers  users?                      @relation("userimages_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_ui")
  users_userimages_modifiedbyTousers users?                      @relation("userimages_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_ui")
  users_userimages_uidTousers        users?                      @relation("userimages_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_ui")

  @@index([createdby], map: "createdby_u_ui_idx")
  @@index([deletedby], map: "deletedby_u_ui_idx")
  @@index([modifiedby], map: "modifyby_u_ui_idx")
  @@index([uid], map: "uid_u_ui_idx")
}

model userkycdetails {
  ukid                                   BigInt        @id @default(autoincrement())
  uid                                    BigInt
  idtype                                 BigInt
  idno                                   String        @db.VarChar(200)
  idstatus                               String        @db.VarChar(200)
  idupload                               String?
  idverifiedby                           BigInt?
  idverificationdate                     DateTime?     @db.Timestamp(6)
  idverificationremarks                  String?       @db.VarChar(500)
  idvalidtill                            DateTime?     @db.Timestamp(6)
  idissuedon                             DateTime?     @db.Timestamp(6)
  isdeleted                              Boolean       @default(false)
  createdby                              BigInt?
  createddate                            DateTime?     @default(now()) @db.Timestamp(6)
  modifiedby                             BigInt?
  modifieddate                           DateTime?     @db.Timestamp(6)
  deletedby                              BigInt?
  deleteddate                            DateTime?     @db.Timestamp(6)
  users_userkycdetails_createdbyTousers  users?        @relation("userkycdetails_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_ukd")
  users_userkycdetails_deletedbyTousers  users?        @relation("userkycdetails_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_ukd")
  identityproof                          identityproof @relation(fields: [idtype], references: [uipid], onDelete: Cascade, map: "idtype")
  users_userkycdetails_modifiedbyTousers users?        @relation("userkycdetails_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_ukd")
  users_userkycdetails_uidTousers        users         @relation("userkycdetails_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uid_u_ukd")

  @@index([createdby], map: "createdby_u_ukd_idx")
  @@index([deletedby], map: "deletedby_u_ukd_idx")
  @@index([idtype], map: "idtype_idx")
  @@index([modifiedby], map: "modifyby_u_ukd_idx")
  @@index([uid], map: "uid_u_ukd_idx")
}

model userlogin {
  uid           BigInt?
  uoid          BigInt?
  username      String?   @db.VarChar(250)
  password      String?   @db.VarChar(100)
  logintime     DateTime? @db.Timestamp(6)
  logouttime    DateTime? @db.Timestamp(6)
  lastloginorg  Boolean?  @default(false)
  isdeleted     Boolean?
  createdby     BigInt?
  createddate   DateTime? @default(now()) @db.Timestamp(6)
  modifiedby    BigInt?
  modifieddate  DateTime? @db.Timestamp(6)
  deletedby     BigInt?
  deleteddate   DateTime? @db.Timestamp(6)
  ulid          BigInt    @id @default(autoincrement())
  roleid        BigInt?
  rightid       BigInt?
  roleid_orgid  BigInt?
  fullname      String?   @db.VarChar
  employee_id   String?   @db.VarChar
  profilestatus BigInt?
  accountstatus BigInt?
}

model userloginhistory {
  ulhid       BigInt     @id @default(autoincrement())
  ipaddress   String?    @db.VarChar(255)
  loggingdate DateTime?  @db.Date
  loggingtime DateTime?  @db.Time(6)
  uid         BigInt?
  isdeleted   Boolean?   @default(false)
  sessions    sessions[]
  users       users?     @relation(fields: [uid], references: [uid], onDelete: Cascade, map: "ulh_u_uid")

  @@index([uid], map: "ulh_u_uid_idx")
}

model usernotifications {
  notificationid                                    BigInt                  @id
  notificationcontent                               String?
  notificationsent                                  DateTime?               @db.Timestamp(6)
  notificationuserid                                BigInt?
  uoid                                              BigInt?
  ttmid                                             BigInt?
  isread                                            Boolean?                @default(false)
  mobilelink                                        String?
  weblink                                           String?
  isdeleted                                         Boolean?
  createdby                                         BigInt?
  createddate                                       DateTime?               @default(now()) @db.Timestamp(6)
  modifiedby                                        BigInt?
  modifieddate                                      DateTime?               @db.Timestamp(6)
  deletedby                                         BigInt?
  deleteddate                                       DateTime?               @db.Timestamp(6)
  users_usernotifications_createdbyTousers          users?                  @relation("usernotifications_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "cb_u_un")
  users_usernotifications_deletedbyTousers          users?                  @relation("usernotifications_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "db_u_un")
  users_usernotifications_modifiedbyTousers         users?                  @relation("usernotifications_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "mb_u_un")
  users_usernotifications_notificationuseridTousers users?                  @relation("usernotifications_notificationuseridTousers", fields: [notificationuserid], references: [uid], onDelete: Cascade, map: "nuid_u_un")
  triggertemplatemapping                            triggertemplatemapping? @relation(fields: [ttmid], references: [ttmid], onDelete: Cascade, map: "ttmid_ttm_un")
  userorganization                                  userorganization?       @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoid_uo_un")

  @@index([createdby], map: "cb_u_un_idx")
  @@index([deletedby], map: "db_u_un_idx")
  @@index([modifiedby], map: "mb_u_un_idx")
  @@index([notificationuserid], map: "nuid_u_un_idx")
  @@index([ttmid], map: "ttmid_ttm_un_idx")
  @@index([uoid], map: "uoid_uo_un_idx")
}

model userorgaddressmapping {
  uoamid                                        BigInt            @id @default(autoincrement())
  uaid                                          BigInt?
  uoid                                          BigInt?
  uid                                           BigInt?
  isdefault                                     Boolean           @default(false)
  uaomname                                      String?           @db.VarChar(50)
  isdeleted                                     Boolean?          @default(false)
  createdby                                     BigInt?
  createddate                                   DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                                    BigInt?
  modifieddate                                  DateTime?         @db.Timestamp(6)
  deletedby                                     BigInt?
  deleteddate                                   DateTime?         @db.Timestamp(6)
  addrtype                                      Int?
  users_userorgaddressmapping_createdbyTousers  users?            @relation("userorgaddressmapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_uoam")
  users_userorgaddressmapping_deletedbyTousers  users?            @relation("userorgaddressmapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_uoam")
  users_userorgaddressmapping_modifiedbyTousers users?            @relation("userorgaddressmapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_uoam")
  users_userorgaddressmapping_uidTousers        users?            @relation("userorgaddressmapping_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uoam_u_uid")
  useraddress                                   useraddress?      @relation(fields: [uaid], references: [uaid], onDelete: Cascade, map: "uoam_ua_uaid")
  userorganization                              userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "uoam_uo_uoid")

  @@index([createdby], map: "createdby_u_uoam_idx")
  @@index([deletedby], map: "deletedby_u_uoam_idx")
  @@index([modifiedby], map: "modifyby_u_uoam_idx")
  @@index([uid], map: "uoam_u_uid_idx")
  @@index([uaid], map: "uoam_ua_uaid_idx")
  @@index([uoid], map: "uoam_uo_uoid_idx")
}

model userorganization {
  uoid                                                   BigInt                   @id @default(autoincrement())
  orgname                                                String?                  @db.VarChar(255)
  orgemail                                               String?                  @db.VarChar(100)
  orgmobile                                              String?                  @db.VarChar(50)
  uid                                                    BigInt?
  iscomposite                                            Boolean?
  isdeleted                                              Boolean?                 @default(false)
  createdby                                              BigInt?
  createddate                                            DateTime?                @default(now()) @db.Timestamp(6)
  modifiedby                                             BigInt?
  modifieddate                                           DateTime?                @db.Timestamp(6)
  deletedby                                              BigInt?
  deleteddate                                            DateTime?                @db.Timestamp(6)
  orglegalname                                           String?                  @db.VarChar(255)
  orgindustry                                            Int?
  orgincstatus                                           Int?
  orgfystartdate                                         DateTime?                @default(now()) @db.Timestamp(6)
  parentorgid                                            BigInt?
  attributes                                             attributes[]
  attributevalues                                        attributevalues[]
  bom                                                    bom[]
  bomschedule                                            bomschedule[]
  expenses                                               expenses[]
  formlabelvalues                                        formlabelvalues[]
  forms                                                  forms[]
  greviance                                              greviance[]
  invoices                                               invoices[]
  journal                                                journal[]
  kycdetails                                             kycdetails[]
  ledgers                                                ledgers[]
  mastervalues                                           mastervalues[]
  materialrequest                                        materialrequest[]
  offerusage                                             offerusage[]
  orderdeliverytracking                                  orderdeliverytracking[]
  orders                                                 orders[]
  org_tax_detail                                         org_tax_detail[]
  orgrolemapping                                         orgrolemapping[]
  product                                                product[]
  productcurrentstock                                    productcurrentstock[]
  prorate                                                prorate[]
  provariantlocations                                    provariantlocations[]
  provariants                                            provariants[]
  prowastage                                             prowastage[]
  psverification                                         psverification[]
  pvorgmap                                               pvorgmap[]
  series                                                 series[]
  sessions                                               sessions[]
  stockconversion                                        stockconversion[]
  stocktransactions                                      stocktransactions[]
  stocktransfer_stocktransfer_uoidfromTouserorganization stocktransfer[]          @relation("stocktransfer_uoidfromTouserorganization")
  stocktransfer_stocktransfer_uoidtoTouserorganization   stocktransfer[]          @relation("stocktransfer_uoidtoTouserorganization")
  table_queue                                            table_queue[]
  triggertemplatemapping                                 triggertemplatemapping[]
  triggertemplates                                       triggertemplates[]
  usercommisionmapping                                   usercommisionmapping[]
  usernotifications                                      usernotifications[]
  userorgaddressmapping                                  userorgaddressmapping[]
  users_userorganization_createdbyTousers                users?                   @relation("userorganization_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_uo")
  users_userorganization_deletedbyTousers                users?                   @relation("userorganization_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_uo")
  users_userorganization_modifiedbyTousers               users?                   @relation("userorganization_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_uo")
  users_userorganization_uidTousers                      users?                   @relation("userorganization_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "uo_u_uid")
  userrolemapping                                        userrolemapping[]

  @@index([createdby], map: "createdby_u_uo_idx")
  @@index([deletedby], map: "deletedby_u_uo_idx")
  @@index([modifiedby], map: "modifyby_u_uo_idx")
  @@index([uid], map: "uo_u_uid_idx")
}

model userrightpricing {
  id    BigInt   @id @default(autoincrement())
  price Decimal? @db.Decimal(19, 4)
}

model userrightsmapping {
  id           BigInt    @id @default(autoincrement())
  userid       BigInt?
  rightid      BigInt?
  Modifiedby   BigInt?
  Modifieddate DateTime? @db.Timestamp(6)
  Isdeleted    Boolean?
  Createdby    BigInt?
}

model userrolemapping {
  urmid                                   BigInt            @id @default(autoincrement())
  uid                                     BigInt?
  uoid                                    BigInt?
  roleid                                  BigInt?
  roletypeid                              BigInt?
  employeeid                              String?           @db.VarChar(45)
  self                                    Int?
  isdeleted                               Boolean?          @default(false)
  createdby                               BigInt?
  createddate                             DateTime?         @default(now()) @db.Timestamp(6)
  modifiedby                              BigInt?
  modifieddate                            DateTime?         @db.Timestamp(6)
  deletedby                               BigInt?
  deleteddate                             DateTime?         @db.Timestamp(6)
  users_userrolemapping_createdbyTousers  users?            @relation("userrolemapping_createdbyTousers", fields: [createdby], references: [uid], onDelete: Cascade, map: "createdby_u_urm")
  users_userrolemapping_deletedbyTousers  users?            @relation("userrolemapping_deletedbyTousers", fields: [deletedby], references: [uid], onDelete: Cascade, map: "deletedby_u_urm")
  users_userrolemapping_modifiedbyTousers users?            @relation("userrolemapping_modifiedbyTousers", fields: [modifiedby], references: [uid], onDelete: Cascade, map: "modifyby_u_urm")
  roles                                   roles?            @relation(fields: [roleid], references: [roleid], onDelete: NoAction, onUpdate: NoAction, map: "urm_role_roleid")
  rolestype                               rolestype?        @relation(fields: [roletypeid], references: [roletypeid], onDelete: NoAction, onUpdate: NoAction, map: "urm_roletype_roletypeid")
  users_userrolemapping_uidTousers        users?            @relation("userrolemapping_uidTousers", fields: [uid], references: [uid], onDelete: Cascade, map: "urm_u_uid")
  userorganization                        userorganization? @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "urm_uo_uoid")

  @@index([createdby], map: "createdby_u_urm_idx")
  @@index([deletedby], map: "deletedby_u_urm_idx")
  @@index([modifiedby], map: "modifyby_u_urm_idx")
  @@index([roleid], map: "urm_r_roleid_idx")
  @@index([roletypeid], map: "urm_roletype_roletypeid_idx")
  @@index([uid], map: "urm_u_uid_idx")
  @@index([uoid], map: "urm_uo_uoid_idx")
}

model users {
  uid                                                                 BigInt                     @id @default(autoincrement())
  fullname                                                            String?                    @db.VarChar(250)
  emailid                                                             String?                    @unique(map: "emailid_unique") @db.VarChar(250)
  mobno                                                               String?                    @unique(map: "mobno_unique") @db.VarChar(100)
  canlogin                                                            Boolean?
  password                                                            String?                    @db.VarChar(100)
  usercode                                                            String?                    @db.VarChar(150)
  image                                                               String?
  isdeleted                                                           Boolean                    @default(false)
  createdby                                                           BigInt?
  createddate                                                         DateTime?                  @default(now()) @db.Timestamp(6)
  modifiedby                                                          BigInt?
  modifieddate                                                        DateTime?                  @db.Timestamp(6)
  deletedby                                                           BigInt?
  deleteddate                                                         DateTime?                  @db.Timestamp(6)
  profilestatus                                                       BigInt?
  accountstatus                                                       BigInt?
  isapproved                                                          Boolean?
  approvedby                                                          BigInt?
  approveddate                                                        DateTime?                  @db.Timestamp(6)
  marketsegement                                                      BigInt?
  languageid                                                          BigInt?
  currencyid                                                          BigInt?
  isadmin                                                             Boolean?
  firstname                                                           String?                    @db.VarChar(45)
  lastname                                                            String?                    @db.VarChar(45)
  employee_id                                                         String?                    @db.VarChar
  attributes_attributes_createdbyTousers                              attributes[]               @relation("attributes_createdbyTousers")
  attributes_attributes_deletedbyTousers                              attributes[]               @relation("attributes_deletedbyTousers")
  attributes_attributes_modifiedbyTousers                             attributes[]               @relation("attributes_modifiedbyTousers")
  attributevalues_attributevalues_createdbyTousers                    attributevalues[]          @relation("attributevalues_createdbyTousers")
  attributevalues_attributevalues_deletedbyTousers                    attributevalues[]          @relation("attributevalues_deletedbyTousers")
  attributevalues_attributevalues_modifiedbyTousers                   attributevalues[]          @relation("attributevalues_modifiedbyTousers")
  bom_bom_approvedbyTousers                                           bom[]                      @relation("bom_approvedbyTousers")
  bom_bom_createdbyTousers                                            bom[]                      @relation("bom_createdbyTousers")
  bom_bom_deletedbyTousers                                            bom[]                      @relation("bom_deletedbyTousers")
  bom_bom_modifiedbyTousers                                           bom[]                      @relation("bom_modifiedbyTousers")
  bomdetails_bomdetails_approvedbyTousers                             bomdetails[]               @relation("bomdetails_approvedbyTousers")
  bomdetails_bomdetails_createdbyTousers                              bomdetails[]               @relation("bomdetails_createdbyTousers")
  bomdetails_bomdetails_deletedbyTousers                              bomdetails[]               @relation("bomdetails_deletedbyTousers")
  bomdetails_bomdetails_modifiedbyTousers                             bomdetails[]               @relation("bomdetails_modifiedbyTousers")
  bomschedule_bomschedule_approvedbyTousers                           bomschedule[]              @relation("bomschedule_approvedbyTousers")
  bomschedule_bomschedule_createdbyTousers                            bomschedule[]              @relation("bomschedule_createdbyTousers")
  bomschedule_bomschedule_deletedbyTousers                            bomschedule[]              @relation("bomschedule_deletedbyTousers")
  bomschedule_bomschedule_modifiedbyTousers                           bomschedule[]              @relation("bomschedule_modifiedbyTousers")
  categories_categories_createdbyTousers                              categories[]               @relation("categories_createdbyTousers")
  categories_categories_deletedbyTousers                              categories[]               @relation("categories_deletedbyTousers")
  categories_categories_modifiedbyTousers                             categories[]               @relation("categories_modifiedbyTousers")
  currencyexchange_currencyexchange_createdbyTousers                  currencyexchange[]         @relation("currencyexchange_createdbyTousers")
  currencyexchange_currencyexchange_deletedbyTousers                  currencyexchange[]         @relation("currencyexchange_deletedbyTousers")
  currencyexchange_currencyexchange_modifiedbyTousers                 currencyexchange[]         @relation("currencyexchange_modifiedbyTousers")
  currencyexchange_currencyexchange_uidTousers                        currencyexchange[]         @relation("currencyexchange_uidTousers")
  documents                                                           documents[]
  errorlogs_errorlogs_createdbyTousers                                errorlogs[]                @relation("errorlogs_createdbyTousers")
  errorlogs_errorlogs_deletedbyTousers                                errorlogs[]                @relation("errorlogs_deletedbyTousers")
  errorlogs_errorlogs_uidTousers                                      errorlogs[]                @relation("errorlogs_uidTousers")
  errorlogs_errorlogs_modifiedbyTousers                               errorlogs[]                @relation("errorlogs_modifiedbyTousers")
  expensedetails_expensedetails_approvedbyTousers                     expensedetails[]           @relation("expensedetails_approvedbyTousers")
  expensedetails_expensedetails_createdbyTousers                      expensedetails[]           @relation("expensedetails_createdbyTousers")
  expensedetails_expensedetails_deletedbyTousers                      expensedetails[]           @relation("expensedetails_deletedbyTousers")
  expensedetails_expensedetails_modifiedbyTousers                     expensedetails[]           @relation("expensedetails_modifiedbyTousers")
  expenses_expenses_approvedbyTousers                                 expenses[]                 @relation("expenses_approvedbyTousers")
  expenses_expenses_createdbyTousers                                  expenses[]                 @relation("expenses_createdbyTousers")
  expenses_expenses_deletedbyTousers                                  expenses[]                 @relation("expenses_deletedbyTousers")
  expenses_expenses_modifiedbyTousers                                 expenses[]                 @relation("expenses_modifiedbyTousers")
  expenses_expenses_expbyTousers                                      expenses[]                 @relation("expenses_expbyTousers")
  expenses_expenses_expvendorTousers                                  expenses[]                 @relation("expenses_expvendorTousers")
  formlabels_formlabels_createdbyTousers                              formlabels[]               @relation("formlabels_createdbyTousers")
  formlabels_formlabels_deletedbyTousers                              formlabels[]               @relation("formlabels_deletedbyTousers")
  formlabels_formlabels_modifiedbyTousers                             formlabels[]               @relation("formlabels_modifiedbyTousers")
  formlabelvalues_formlabelvalues_createdbyTousers                    formlabelvalues[]          @relation("formlabelvalues_createdbyTousers")
  formlabelvalues_formlabelvalues_deletedbyTousers                    formlabelvalues[]          @relation("formlabelvalues_deletedbyTousers")
  formlabelvalues_formlabelvalues_modifiedbyTousers                   formlabelvalues[]          @relation("formlabelvalues_modifiedbyTousers")
  formlabelvalues_formlabelvalues_uidTousers                          formlabelvalues[]          @relation("formlabelvalues_uidTousers")
  forms_forms_createdbyTousers                                        forms[]                    @relation("forms_createdbyTousers")
  forms_forms_deletedbyTousers                                        forms[]                    @relation("forms_deletedbyTousers")
  forms_forms_modifiedbyTousers                                       forms[]                    @relation("forms_modifiedbyTousers")
  forms_forms_uidTousers                                              forms[]                    @relation("forms_uidTousers")
  gdattachments_gdattachments_createdbyTousers                        gdattachments[]            @relation("gdattachments_createdbyTousers")
  gdattachments_gdattachments_deletedbyTousers                        gdattachments[]            @relation("gdattachments_deletedbyTousers")
  gdattachments_gdattachments_modifiedbyTousers                       gdattachments[]            @relation("gdattachments_modifiedbyTousers")
  greviance_greviance_createdbyTousers                                greviance[]                @relation("greviance_createdbyTousers")
  greviance_greviance_deletedbyTousers                                greviance[]                @relation("greviance_deletedbyTousers")
  greviance_greviance_modifiedbyTousers                               greviance[]                @relation("greviance_modifiedbyTousers")
  greviance_greviance_resolvedbyTousers                               greviance[]                @relation("greviance_resolvedbyTousers")
  greviance_greviance_uidTousers                                      greviance[]                @relation("greviance_uidTousers")
  greviancedetails_greviancedetails_createdbyTousers                  greviancedetails[]         @relation("greviancedetails_createdbyTousers")
  greviancedetails_greviancedetails_deletedbyTousers                  greviancedetails[]         @relation("greviancedetails_deletedbyTousers")
  greviancedetails_greviancedetails_fromidTousers                     greviancedetails[]         @relation("greviancedetails_fromidTousers")
  greviancedetails_greviancedetails_modifiedbyTousers                 greviancedetails[]         @relation("greviancedetails_modifiedbyTousers")
  identityproof_identityproof_createdbyTousers                        identityproof[]            @relation("identityproof_createdbyTousers")
  identityproof_identityproof_deletedbyTousers                        identityproof[]            @relation("identityproof_deletedbyTousers")
  identityproof_identityproof_modifiedbyTousers                       identityproof[]            @relation("identityproof_modifiedbyTousers")
  invoicedeliverymapping_invoicedeliverymapping_approvedbyTousers     invoicedeliverymapping[]   @relation("invoicedeliverymapping_approvedbyTousers")
  invoicedeliverymapping_invoicedeliverymapping_createdbyTousers      invoicedeliverymapping[]   @relation("invoicedeliverymapping_createdbyTousers")
  invoicedeliverymapping_invoicedeliverymapping_deletedbyTousers      invoicedeliverymapping[]   @relation("invoicedeliverymapping_deletedbyTousers")
  invoicedeliverymapping_invoicedeliverymapping_modifiedbyTousers     invoicedeliverymapping[]   @relation("invoicedeliverymapping_modifiedbyTousers")
  invoices_invoices_approvedbyTousers                                 invoices[]                 @relation("invoices_approvedbyTousers")
  invoices_invoices_createdbyTousers                                  invoices[]                 @relation("invoices_createdbyTousers")
  invoices_invoices_deletedbyTousers                                  invoices[]                 @relation("invoices_deletedbyTousers")
  invoices_invoices_modifiedbyTousers                                 invoices[]                 @relation("invoices_modifiedbyTousers")
  journal_journal_approvedbyTousers                                   journal[]                  @relation("journal_approvedbyTousers")
  journal_journal_createdbyTousers                                    journal[]                  @relation("journal_createdbyTousers")
  journal_journal_deletedbyTousers                                    journal[]                  @relation("journal_deletedbyTousers")
  journal_journal_modifiedbyTousers                                   journal[]                  @relation("journal_modifiedbyTousers")
  kycdetails_kycdetails_createdbyTousers                              kycdetails[]               @relation("kycdetails_createdbyTousers")
  kycdetails_kycdetails_deletedbyTousers                              kycdetails[]               @relation("kycdetails_deletedbyTousers")
  kycdetails_kycdetails_uidTousers                                    kycdetails[]               @relation("kycdetails_uidTousers")
  kycdetails_kycdetails_modifiedbyTousers                             kycdetails[]               @relation("kycdetails_modifiedbyTousers")
  ledgers_ledgers_createdbyTousers                                    ledgers[]                  @relation("ledgers_createdbyTousers")
  ledgers_ledgers_deletedbyTousers                                    ledgers[]                  @relation("ledgers_deletedbyTousers")
  ledgers_ledgers_modifiedbyTousers                                   ledgers[]                  @relation("ledgers_modifiedbyTousers")
  ledgertaxmapping_ledgertaxmapping_createdbyTousers                  ledgertaxmapping[]         @relation("ledgertaxmapping_createdbyTousers")
  ledgertaxmapping_ledgertaxmapping_deletedbyTousers                  ledgertaxmapping[]         @relation("ledgertaxmapping_deletedbyTousers")
  ledgertaxmapping_ledgertaxmapping_modifiedbyTousers                 ledgertaxmapping[]         @relation("ledgertaxmapping_modifiedbyTousers")
  ledgerusermapping_ledgerusermapping_createdbyTousers                ledgerusermapping[]        @relation("ledgerusermapping_createdbyTousers")
  ledgerusermapping_ledgerusermapping_deletedbyTousers                ledgerusermapping[]        @relation("ledgerusermapping_deletedbyTousers")
  ledgerusermapping_ledgerusermapping_uidTousers                      ledgerusermapping[]        @relation("ledgerusermapping_uidTousers")
  ledgerusermapping_ledgerusermapping_modifiedbyTousers               ledgerusermapping[]        @relation("ledgerusermapping_modifiedbyTousers")
  mastervalues_mastervalues_createdbyTousers                          mastervalues[]             @relation("mastervalues_createdbyTousers")
  mastervalues_mastervalues_deletedbyTousers                          mastervalues[]             @relation("mastervalues_deletedbyTousers")
  mastervalues_mastervalues_modifiedbyTousers                         mastervalues[]             @relation("mastervalues_modifiedbyTousers")
  materialrequest_materialrequest_approvedbyTousers                   materialrequest[]          @relation("materialrequest_approvedbyTousers")
  materialrequest_materialrequest_createdbyTousers                    materialrequest[]          @relation("materialrequest_createdbyTousers")
  materialrequest_materialrequest_deletedbyTousers                    materialrequest[]          @relation("materialrequest_deletedbyTousers")
  materialrequest_materialrequest_modifiedbyTousers                   materialrequest[]          @relation("materialrequest_modifiedbyTousers")
  materialrequestitems_materialrequestitems_approvedbyTousers         materialrequestitems[]     @relation("materialrequestitems_approvedbyTousers")
  materialrequestitems_materialrequestitems_createdbyTousers          materialrequestitems[]     @relation("materialrequestitems_createdbyTousers")
  materialrequestitems_materialrequestitems_deletedbyTousers          materialrequestitems[]     @relation("materialrequestitems_deletedbyTousers")
  materialrequestitems_materialrequestitems_itemrequestbyTousers      materialrequestitems[]     @relation("materialrequestitems_itemrequestbyTousers")
  materialrequestitems_materialrequestitems_modifiedbyTousers         materialrequestitems[]     @relation("materialrequestitems_modifiedbyTousers")
  mridetails_mridetails_approvedbyTousers                             mridetails[]               @relation("mridetails_approvedbyTousers")
  mridetails_mridetails_createdbyTousers                              mridetails[]               @relation("mridetails_createdbyTousers")
  mridetails_mridetails_deletedbyTousers                              mridetails[]               @relation("mridetails_deletedbyTousers")
  mridetails_mridetails_modifiedbyTousers                             mridetails[]               @relation("mridetails_modifiedbyTousers")
  odtitemsmapping_odtitemsmapping_approvedbyTousers                   odtitemsmapping[]          @relation("odtitemsmapping_approvedbyTousers")
  odtitemsmapping_odtitemsmapping_createdbyTousers                    odtitemsmapping[]          @relation("odtitemsmapping_createdbyTousers")
  odtitemsmapping_odtitemsmapping_deletedbyTousers                    odtitemsmapping[]          @relation("odtitemsmapping_deletedbyTousers")
  odtitemsmapping_odtitemsmapping_modifiedbyTousers                   odtitemsmapping[]          @relation("odtitemsmapping_modifiedbyTousers")
  offers_offers_approvedbyTousers                                     offers[]                   @relation("offers_approvedbyTousers")
  offers_offers_createdbyTousers                                      offers[]                   @relation("offers_createdbyTousers")
  offers_offers_deletedbyTousers                                      offers[]                   @relation("offers_deletedbyTousers")
  offers_offers_modifiedbyTousers                                     offers[]                   @relation("offers_modifiedbyTousers")
  offerusage_offerusage_approvedbyTousers                             offerusage[]               @relation("offerusage_approvedbyTousers")
  offerusage_offerusage_createdbyTousers                              offerusage[]               @relation("offerusage_createdbyTousers")
  offerusage_offerusage_deletedbyTousers                              offerusage[]               @relation("offerusage_deletedbyTousers")
  offerusage_offerusage_modifiedbyTousers                             offerusage[]               @relation("offerusage_modifiedbyTousers")
  offerusage_offerusage_uidTousers                                    offerusage[]               @relation("offerusage_uidTousers")
  orderdeliverytracking_orderdeliverytracking_approvedbyTousers       orderdeliverytracking[]    @relation("orderdeliverytracking_approvedbyTousers")
  orderdeliverytracking_orderdeliverytracking_createdbyTousers        orderdeliverytracking[]    @relation("orderdeliverytracking_createdbyTousers")
  orderdeliverytracking_orderdeliverytracking_deletedbyTousers        orderdeliverytracking[]    @relation("orderdeliverytracking_deletedbyTousers")
  orderdeliverytracking_orderdeliverytracking_modifiedbyTousers       orderdeliverytracking[]    @relation("orderdeliverytracking_modifiedbyTousers")
  orderdeliverytracking_orderdeliverytracking_odtshipperTousers       orderdeliverytracking[]    @relation("orderdeliverytracking_odtshipperTousers")
  orderitemdetails_orderitemdetails_approvedbyTousers                 orderitemdetails[]         @relation("orderitemdetails_approvedbyTousers")
  orderitemdetails_orderitemdetails_createdbyTousers                  orderitemdetails[]         @relation("orderitemdetails_createdbyTousers")
  orderitemdetails_orderitemdetails_deletedbyTousers                  orderitemdetails[]         @relation("orderitemdetails_deletedbyTousers")
  orderitemdetails_orderitemdetails_modifiedbyTousers                 orderitemdetails[]         @relation("orderitemdetails_modifiedbyTousers")
  orderitems_orderitems_approvedbyTousers                             orderitems[]               @relation("orderitems_approvedbyTousers")
  orderitems_orderitems_createdbyTousers                              orderitems[]               @relation("orderitems_createdbyTousers")
  orderitems_orderitems_deletedbyTousers                              orderitems[]               @relation("orderitems_deletedbyTousers")
  orderitems_orderitems_modifiedbyTousers                             orderitems[]               @relation("orderitems_modifiedbyTousers")
  orders_orders_approvedbyTousers                                     orders[]                   @relation("orders_approvedbyTousers")
  orders_orders_buyeridTousers                                        orders[]                   @relation("orders_buyeridTousers")
  orders_orders_consigneeidTousers                                    orders[]                   @relation("orders_consigneeidTousers")
  orders_orders_createdbyTousers                                      orders[]                   @relation("orders_createdbyTousers")
  orders_orders_deletedbyTousers                                      orders[]                   @relation("orders_deletedbyTousers")
  orders_orders_modifiedbyTousers                                     orders[]                   @relation("orders_modifiedbyTousers")
  orders_orders_selleridTousers                                       orders[]                   @relation("orders_selleridTousers")
  ordersalescommision_ordersalescommision_approvedbyTousers           ordersalescommision[]      @relation("ordersalescommision_approvedbyTousers")
  ordersalescommision_ordersalescommision_createdbyTousers            ordersalescommision[]      @relation("ordersalescommision_createdbyTousers")
  ordersalescommision_ordersalescommision_deletedbyTousers            ordersalescommision[]      @relation("ordersalescommision_deletedbyTousers")
  ordersalescommision_ordersalescommision_modifiedbyTousers           ordersalescommision[]      @relation("ordersalescommision_modifiedbyTousers")
  ordertaxdetails_ordertaxdetails_approvedbyTousers                   ordertaxdetails[]          @relation("ordertaxdetails_approvedbyTousers")
  ordertaxdetails_ordertaxdetails_createdbyTousers                    ordertaxdetails[]          @relation("ordertaxdetails_createdbyTousers")
  ordertaxdetails_ordertaxdetails_deletedbyTousers                    ordertaxdetails[]          @relation("ordertaxdetails_deletedbyTousers")
  ordertaxdetails_ordertaxdetails_modifiedbyTousers                   ordertaxdetails[]          @relation("ordertaxdetails_modifiedbyTousers")
  payment_payment_approvedbyTousers                                   payment[]                  @relation("payment_approvedbyTousers")
  payment_payment_createdbyTousers                                    payment[]                  @relation("payment_createdbyTousers")
  payment_payment_deletedbyTousers                                    payment[]                  @relation("payment_deletedbyTousers")
  payment_payment_modifiedbyTousers                                   payment[]                  @relation("payment_modifiedbyTousers")
  product_product_createdbyTousers                                    product[]                  @relation("product_createdbyTousers")
  product_product_deletedbyTousers                                    product[]                  @relation("product_deletedbyTousers")
  product_product_modifiedbyTousers                                   product[]                  @relation("product_modifiedbyTousers")
  productreview_productreview_createdbyTousers                        productreview[]            @relation("productreview_createdbyTousers")
  productreview_productreview_deletedbyTousers                        productreview[]            @relation("productreview_deletedbyTousers")
  productreview_productreview_modifiedbyTousers                       productreview[]            @relation("productreview_modifiedbyTousers")
  prorate_prorate_createdbyTousers                                    prorate[]                  @relation("prorate_createdbyTousers")
  prorate_prorate_deletedbyTousers                                    prorate[]                  @relation("prorate_deletedbyTousers")
  prorate_prorate_modifiedbyTousers                                   prorate[]                  @relation("prorate_modifiedbyTousers")
  protags_protags_createdbyTousers                                    protags[]                  @relation("protags_createdbyTousers")
  protags_protags_deletedbyTousers                                    protags[]                  @relation("protags_deletedbyTousers")
  protags_protags_modifiedbyTousers                                   protags[]                  @relation("protags_modifiedbyTousers")
  provariantlocations_provariantlocations_approvedbyTousers           provariantlocations[]      @relation("provariantlocations_approvedbyTousers")
  provariantlocations_provariantlocations_createdbyTousers            provariantlocations[]      @relation("provariantlocations_createdbyTousers")
  provariantlocations_provariantlocations_deletedbyTousers            provariantlocations[]      @relation("provariantlocations_deletedbyTousers")
  provariantlocations_provariantlocations_modifiedbyTousers           provariantlocations[]      @relation("provariantlocations_modifiedbyTousers")
  provariants_provariants_createdbyTousers                            provariants[]              @relation("provariants_createdbyTousers")
  provariants_provariants_deletedbyTousers                            provariants[]              @relation("provariants_deletedbyTousers")
  provariants_provariants_modifiedbyTousers                           provariants[]              @relation("provariants_modifiedbyTousers")
  provarianttax_provarianttax_approvedbyTousers                       provarianttax[]            @relation("provarianttax_approvedbyTousers")
  provarianttax_provarianttax_createdbyTousers                        provarianttax[]            @relation("provarianttax_createdbyTousers")
  provarianttax_provarianttax_deletedbyTousers                        provarianttax[]            @relation("provarianttax_deletedbyTousers")
  provarianttax_provarianttax_modifiedbyTousers                       provarianttax[]            @relation("provarianttax_modifiedbyTousers")
  prowastage_prowastage_approvedbyTousers                             prowastage[]               @relation("prowastage_approvedbyTousers")
  prowastage_prowastage_createdbyTousers                              prowastage[]               @relation("prowastage_createdbyTousers")
  prowastage_prowastage_deletedbyTousers                              prowastage[]               @relation("prowastage_deletedbyTousers")
  prowastage_prowastage_modifiedbyTousers                             prowastage[]               @relation("prowastage_modifiedbyTousers")
  psverification_psverification_approvedbyTousers                     psverification[]           @relation("psverification_approvedbyTousers")
  psverification_psverification_createdbyTousers                      psverification[]           @relation("psverification_createdbyTousers")
  psverification_psverification_deletedbyTousers                      psverification[]           @relation("psverification_deletedbyTousers")
  psverification_psverification_modifiedbyTousers                     psverification[]           @relation("psverification_modifiedbyTousers")
  pvamapping_pvamapping_createdbyTousers                              pvamapping[]               @relation("pvamapping_createdbyTousers")
  pvamapping_pvamapping_deletedbyTousers                              pvamapping[]               @relation("pvamapping_deletedbyTousers")
  pvamapping_pvamapping_modifiedbyTousers                             pvamapping[]               @relation("pvamapping_modifiedbyTousers")
  pvamvalues_pvamvalues_createdbyTousers                              pvamvalues[]               @relation("pvamvalues_createdbyTousers")
  pvamvalues_pvamvalues_deletedbyTousers                              pvamvalues[]               @relation("pvamvalues_deletedbyTousers")
  pvamvalues_pvamvalues_modifiedbyTousers                             pvamvalues[]               @relation("pvamvalues_modifiedbyTousers")
  rights_rights_createdbyTousers                                      rights[]                   @relation("rights_createdbyTousers")
  rights_rights_deletedbyTousers                                      rights[]                   @relation("rights_deletedbyTousers")
  rights_rights_modifiedbyTousers                                     rights[]                   @relation("rights_modifiedbyTousers")
  roles_roles_createdbyTousers                                        roles[]                    @relation("roles_createdbyTousers")
  roles_roles_deletedbyTousers                                        roles[]                    @relation("roles_deletedbyTousers")
  roles_roles_modifiedbyTousers                                       roles[]                    @relation("roles_modifiedbyTousers")
  rolesrightsmapping_rolesrightsmapping_createdbyTousers              rolesrightsmapping[]       @relation("rolesrightsmapping_createdbyTousers")
  rolesrightsmapping_rolesrightsmapping_deletedbyTousers              rolesrightsmapping[]       @relation("rolesrightsmapping_deletedbyTousers")
  rolesrightsmapping_rolesrightsmapping_modifiedbyTousers             rolesrightsmapping[]       @relation("rolesrightsmapping_modifiedbyTousers")
  series_series_createdbyTousers                                      series[]                   @relation("series_createdbyTousers")
  series_series_deletedbyTousers                                      series[]                   @relation("series_deletedbyTousers")
  series_series_modifiedbyTousers                                     series[]                   @relation("series_modifiedbyTousers")
  sessions                                                            sessions[]
  stockconversion_stockconversion_approvedbyTousers                   stockconversion[]          @relation("stockconversion_approvedbyTousers")
  stockconversion_stockconversion_createdbyTousers                    stockconversion[]          @relation("stockconversion_createdbyTousers")
  stockconversion_stockconversion_deletedbyTousers                    stockconversion[]          @relation("stockconversion_deletedbyTousers")
  stockconversion_stockconversion_modifiedbyTousers                   stockconversion[]          @relation("stockconversion_modifiedbyTousers")
  stockconversiondetails_stockconversiondetails_approvedbyTousers     stockconversiondetails[]   @relation("stockconversiondetails_approvedbyTousers")
  stockconversiondetails_stockconversiondetails_createdbyTousers      stockconversiondetails[]   @relation("stockconversiondetails_createdbyTousers")
  stockconversiondetails_stockconversiondetails_deletedbyTousers      stockconversiondetails[]   @relation("stockconversiondetails_deletedbyTousers")
  stockconversiondetails_stockconversiondetails_modifiedbyTousers     stockconversiondetails[]   @relation("stockconversiondetails_modifiedbyTousers")
  stocktransactions_stocktransactions_approvedbyTousers               stocktransactions[]        @relation("stocktransactions_approvedbyTousers")
  stocktransactions_stocktransactions_createdbyTousers                stocktransactions[]        @relation("stocktransactions_createdbyTousers")
  stocktransactions_stocktransactions_deletedbyTousers                stocktransactions[]        @relation("stocktransactions_deletedbyTousers")
  stocktransactions_stocktransactions_modifiedbyTousers               stocktransactions[]        @relation("stocktransactions_modifiedbyTousers")
  stocktransfer_stocktransfer_approvedbyTousers                       stocktransfer[]            @relation("stocktransfer_approvedbyTousers")
  stocktransfer_stocktransfer_createdbyTousers                        stocktransfer[]            @relation("stocktransfer_createdbyTousers")
  stocktransfer_stocktransfer_deletedbyTousers                        stocktransfer[]            @relation("stocktransfer_deletedbyTousers")
  stocktransfer_stocktransfer_modifiedbyTousers                       stocktransfer[]            @relation("stocktransfer_modifiedbyTousers")
  table_bookings                                                      table_bookings[]
  triggertemplatemapping_triggertemplatemapping_approvedbyTousers     triggertemplatemapping[]   @relation("triggertemplatemapping_approvedbyTousers")
  triggertemplatemapping_triggertemplatemapping_createdbyTousers      triggertemplatemapping[]   @relation("triggertemplatemapping_createdbyTousers")
  triggertemplatemapping_triggertemplatemapping_deletedbyTousers      triggertemplatemapping[]   @relation("triggertemplatemapping_deletedbyTousers")
  triggertemplatemapping_triggertemplatemapping_modifiedbyTousers     triggertemplatemapping[]   @relation("triggertemplatemapping_modifiedbyTousers")
  triggertemplates_triggertemplates_approvedbyTousers                 triggertemplates[]         @relation("triggertemplates_approvedbyTousers")
  triggertemplates_triggertemplates_createdbyTousers                  triggertemplates[]         @relation("triggertemplates_createdbyTousers")
  triggertemplates_triggertemplates_deletedbyTousers                  triggertemplates[]         @relation("triggertemplates_deletedbyTousers")
  triggertemplates_triggertemplates_modifiedbyTousers                 triggertemplates[]         @relation("triggertemplates_modifiedbyTousers")
  triggertemplatevariables_triggertemplatevariables_approvedbyTousers triggertemplatevariables[] @relation("triggertemplatevariables_approvedbyTousers")
  triggertemplatevariables_triggertemplatevariables_createdbyTousers  triggertemplatevariables[] @relation("triggertemplatevariables_createdbyTousers")
  triggertemplatevariables_triggertemplatevariables_deletedbyTousers  triggertemplatevariables[] @relation("triggertemplatevariables_deletedbyTousers")
  triggertemplatevariables_triggertemplatevariables_modifiedbyTousers triggertemplatevariables[] @relation("triggertemplatevariables_modifiedbyTousers")
  uahistory_uahistory_createdbyTousers                                uahistory[]                @relation("uahistory_createdbyTousers")
  uahistory_uahistory_deletedbyTousers                                uahistory[]                @relation("uahistory_deletedbyTousers")
  uahistory_uahistory_modifiedbyTousers                               uahistory[]                @relation("uahistory_modifiedbyTousers")
  unitofmeasure_unitofmeasure_createdbyTousers                        unitofmeasure[]            @relation("unitofmeasure_createdbyTousers")
  unitofmeasure_unitofmeasure_deletedbyTousers                        unitofmeasure[]            @relation("unitofmeasure_deletedbyTousers")
  unitofmeasure_unitofmeasure_modifiedbyTousers                       unitofmeasure[]            @relation("unitofmeasure_modifiedbyTousers")
  unitofmeasure_unitofmeasure_uidTousers                              unitofmeasure[]            @relation("unitofmeasure_uidTousers")
  uom_mapping_uom_mapping_createdbyTousers                            uom_mapping[]              @relation("uom_mapping_createdbyTousers")
  uom_mapping_uom_mapping_modifiedbyTousers                           uom_mapping[]              @relation("uom_mapping_modifiedbyTousers")
  uomconversions_uomconversions_createdbyTousers                      uomconversions[]           @relation("uomconversions_createdbyTousers")
  uomconversions_uomconversions_deletedbyTousers                      uomconversions[]           @relation("uomconversions_deletedbyTousers")
  uomconversions_uomconversions_modifiedbyTousers                     uomconversions[]           @relation("uomconversions_modifiedbyTousers")
  uomconversions_uomconversions_uidTousers                            uomconversions[]           @relation("uomconversions_uidTousers")
  useractivityhistory_useractivityhistory_createdbyTousers            useractivityhistory[]      @relation("useractivityhistory_createdbyTousers")
  useractivityhistory_useractivityhistory_deletedbyTousers            useractivityhistory[]      @relation("useractivityhistory_deletedbyTousers")
  useractivityhistory_useractivityhistory_modifiedbyTousers           useractivityhistory[]      @relation("useractivityhistory_modifiedbyTousers")
  useractivityhistory_useractivityhistory_uidTousers                  useractivityhistory[]      @relation("useractivityhistory_uidTousers")
  useradditionalcolumns_useradditionalcolumns_createdbyTousers        useradditionalcolumns[]    @relation("useradditionalcolumns_createdbyTousers")
  useradditionalcolumns_useradditionalcolumns_deletedbyTousers        useradditionalcolumns[]    @relation("useradditionalcolumns_deletedbyTousers")
  useradditionalcolumns_useradditionalcolumns_modifiedbyTousers       useradditionalcolumns[]    @relation("useradditionalcolumns_modifiedbyTousers")
  useradditionalcolumns_useradditionalcolumns_uidTousers              useradditionalcolumns[]    @relation("useradditionalcolumns_uidTousers")
  useraddress_useraddress_createdbyTousers                            useraddress[]              @relation("useraddress_createdbyTousers")
  useraddress_useraddress_deletedbyTousers                            useraddress[]              @relation("useraddress_deletedbyTousers")
  useraddress_useraddress_modifiedbyTousers                           useraddress[]              @relation("useraddress_modifiedbyTousers")
  useraddress_useraddress_uidTousers                                  useraddress[]              @relation("useraddress_uidTousers")
  userattrmapping_userattrmapping_createdbyTousers                    userattrmapping[]          @relation("userattrmapping_createdbyTousers")
  userattrmapping_userattrmapping_deletedbyTousers                    userattrmapping[]          @relation("userattrmapping_deletedbyTousers")
  userattrmapping_userattrmapping_modifiedbyTousers                   userattrmapping[]          @relation("userattrmapping_modifiedbyTousers")
  userattrmapping_userattrmapping_uidTousers                          userattrmapping[]          @relation("userattrmapping_uidTousers")
  usercommisionmapping                                                usercommisionmapping[]
  userimages_userimages_createdbyTousers                              userimages[]               @relation("userimages_createdbyTousers")
  userimages_userimages_deletedbyTousers                              userimages[]               @relation("userimages_deletedbyTousers")
  userimages_userimages_modifiedbyTousers                             userimages[]               @relation("userimages_modifiedbyTousers")
  userimages_userimages_uidTousers                                    userimages[]               @relation("userimages_uidTousers")
  userkycdetails_userkycdetails_createdbyTousers                      userkycdetails[]           @relation("userkycdetails_createdbyTousers")
  userkycdetails_userkycdetails_deletedbyTousers                      userkycdetails[]           @relation("userkycdetails_deletedbyTousers")
  userkycdetails_userkycdetails_modifiedbyTousers                     userkycdetails[]           @relation("userkycdetails_modifiedbyTousers")
  userkycdetails_userkycdetails_uidTousers                            userkycdetails[]           @relation("userkycdetails_uidTousers")
  userloginhistory                                                    userloginhistory[]
  usernotifications_usernotifications_createdbyTousers                usernotifications[]        @relation("usernotifications_createdbyTousers")
  usernotifications_usernotifications_deletedbyTousers                usernotifications[]        @relation("usernotifications_deletedbyTousers")
  usernotifications_usernotifications_modifiedbyTousers               usernotifications[]        @relation("usernotifications_modifiedbyTousers")
  usernotifications_usernotifications_notificationuseridTousers       usernotifications[]        @relation("usernotifications_notificationuseridTousers")
  userorgaddressmapping_userorgaddressmapping_createdbyTousers        userorgaddressmapping[]    @relation("userorgaddressmapping_createdbyTousers")
  userorgaddressmapping_userorgaddressmapping_deletedbyTousers        userorgaddressmapping[]    @relation("userorgaddressmapping_deletedbyTousers")
  userorgaddressmapping_userorgaddressmapping_modifiedbyTousers       userorgaddressmapping[]    @relation("userorgaddressmapping_modifiedbyTousers")
  userorgaddressmapping_userorgaddressmapping_uidTousers              userorgaddressmapping[]    @relation("userorgaddressmapping_uidTousers")
  userorganization_userorganization_createdbyTousers                  userorganization[]         @relation("userorganization_createdbyTousers")
  userorganization_userorganization_deletedbyTousers                  userorganization[]         @relation("userorganization_deletedbyTousers")
  userorganization_userorganization_modifiedbyTousers                 userorganization[]         @relation("userorganization_modifiedbyTousers")
  userorganization_userorganization_uidTousers                        userorganization[]         @relation("userorganization_uidTousers")
  userrolemapping_userrolemapping_createdbyTousers                    userrolemapping[]          @relation("userrolemapping_createdbyTousers")
  userrolemapping_userrolemapping_deletedbyTousers                    userrolemapping[]          @relation("userrolemapping_deletedbyTousers")
  userrolemapping_userrolemapping_modifiedbyTousers                   userrolemapping[]          @relation("userrolemapping_modifiedbyTousers")
  userrolemapping_userrolemapping_uidTousers                          userrolemapping[]          @relation("userrolemapping_uidTousers")
  mastervalues_users_accountstatusTomastervalues                      mastervalues?              @relation("users_accountstatusTomastervalues", fields: [accountstatus], references: [mvid], onDelete: Cascade, map: "acst_mv_u")
  currencies                                                          currencies?                @relation(fields: [currencyid], references: [currid], onDelete: Cascade, map: "currid_curr_u")
  mastervalues_users_marketsegementTomastervalues                     mastervalues?              @relation("users_marketsegementTomastervalues", fields: [marketsegement], references: [mvid], onDelete: Cascade, map: "ms_mv_u")
  mastervalues_users_profilestatusTomastervalues                      mastervalues?              @relation("users_profilestatusTomastervalues", fields: [profilestatus], references: [mvid], onDelete: Cascade, map: "prst_mv_u")

  @@index([accountstatus], map: "acst_mv_u_idx")
  @@index([createdby], map: "createdby_u_u_idx")
  @@index([createdby], map: "createdby_u_user_idx")
  @@index([currencyid], map: "currid_curr_u_idx")
  @@index([marketsegement], map: "ms_mv_u_idx")
  @@index([profilestatus], map: "prst_mv_u_idx")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model org_tax_detail {
  id                     Int                @id @default(autoincrement())
  identification_type    String
  identification_no      Int
  effective_from         DateTime           @db.Timestamptz(6)
  valid_upto             DateTime           @db.Timestamptz(6)
  registration_date      DateTime           @db.Timestamptz(6)
  state                  BigInt
  identification_subtype String
  status                 Int                @db.SmallInt
  is_verified            Boolean            @default(false)
  uoid                   BigInt
  states                 states             @relation(fields: [state], references: [stateid], map: "fk_states")
  tax_identification     tax_identification @relation(fields: [identification_no], references: [id], map: "fk_tax_identification")
  userorganization       userorganization   @relation(fields: [uoid], references: [uoid], onDelete: Cascade, map: "fk_userorganization")

  @@index([identification_no], map: "idx_org_tax_detail_identification_no")
  @@index([state], map: "idx_org_tax_detail_state")
  @@index([uoid], map: "idx_org_tax_detail_uoid")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model tax_identification {
  id             Int              @id @default(autoincrement())
  name           String
  status         Int              @db.SmallInt
  validation     String
  is_subtype     Boolean          @default(false)
  is_compulsory  Boolean          @default(false)
  id_subtype     Json             @db.Json
  pan_card       String?
  aadhar_card    String?
  gstn           String?
  tan            String?
  cin            String?
  iec            String?
  fssai          String?
  org_tax_detail org_tax_detail[]
}
